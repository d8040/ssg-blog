/*
SQLyog Community v13.1.7 (64 bit)
MySQL - 10.4.14-MariaDB : Database - textBoard
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`textBoard` /*!40100 DEFAULT CHARACTER SET utf8mb4 */;

USE `textBoard`;

/*Table structure for table `article` */

DROP TABLE IF EXISTS `article`;

CREATE TABLE `article` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `regDate` datetime NOT NULL,
  `updateDate` datetime NOT NULL,
  `title` char(200) NOT NULL,
  `body` text NOT NULL,
  `memberId` int(10) unsigned NOT NULL,
  `boardId` int(10) unsigned NOT NULL,
  `rcmCount` int(10) unsigned NOT NULL,
  `hit` int(10) unsigned NOT NULL,
  `commentsCount` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8mb4;

/*Data for the table `article` */

insert  into `article`(`id`,`regDate`,`updateDate`,`title`,`body`,`memberId`,`boardId`,`rcmCount`,`hit`,`commentsCount`) values 
(1,'2020-12-20 01:25:13','2020-12-31 01:19:13','SCSS(Sacc)정리?','CSS는 상대적으로 배우기 쉽고 재미있습니다.  \r\n웹 개발 초심자에게는 이만큼 접근하기 좋은 게 없죠.\r\n\r\nCSS는 분명 쉽고 재밌지만, 작업이 고도화될수록 불편함도 같이 커집니다.  \r\n불필요한 선택자(Selector)의 과용과 연산 기능의 한계, 구문(Statement)의 부재 등 프로젝트의 규모가 커질수록 아쉬움도 같이 커지죠.  \r\n하지만 웹에서는 표준 CSS만 동작할 수 있기 때문에 다른 선택권이 없습니다.\r\n\r\n그렇다면 우리는 앞으로 계속 CSS만 사용해야 할까요?\r\n\r\n# CSS Preprocessor 란?\r\n\r\nHTML, CSS를 다루는 분이라면 한 번은 들어봤을 Sass, Less 등이 있습니다.  \r\n이 친구들은 CSS 전(예비)처리기 입니다.  \r\n보통 CSS Preprocessor 라고 부릅니다.\r\n\r\nCSS가 동작하기 전에 사용하는 기능으로,  \r\n웹에서는 분명 CSS가 동작하지만 우리는 CSS의 불편함을 이런 확장 기능으로 상쇄할 수 있습니다.\r\n\r\n> 사스는 기초 언어에 힘과 우아함을 더해주는 CSS의 확장이다.\r\n\r\n### 어떻게 사용하나요?\r\n\r\n위에서 언급한 것처럼 웹에서는 CSS만 동작합니다.  \r\n[Sass](https://sass-lang.com/), [Less](http://lesscss.org/), [Stylus](http://stylus-lang.com/) 같은 전처리기(이하 ‘전처리기’로 표기)는 직접 동작시킬 수 없습니다.  \r\n그렇다면 어떻게 사용할 수 있을까요?\r\n\r\nCSS는 불편하니 일단 배제하고 우선 전처리기로 작성(코딩)합니다.  \r\n전처리기는 CSS 문법과 굉장히 유사하지만 선택자의 중첩(Nesting)이나 조건문, 반복문, 다양한 단위(Unit)의 연산 등… 표준 CSS 보다 훨씬 많은 기능을 사용해서 편리하게 작성할 수 있습니다.  \r\n단, 웹에서는 직접 동작하지 않으니 이렇게 작성한 전처리기를 웹에서 동작 가능한 표준의 CSS로 컴파일(Compile)합니다.  \r\n전처리기로 작성하고 CSS로 컴파일해서 동작시키는 거죠.\r\n\r\n### 컴파일은 어떻게 하나요?\r\n\r\n전처리기 종류마다 방법이 조금씩 다르고 여러 방식을 제공합니다.  \r\n보통의 경우 컴파일러(Compiler)가 필요합니다.  \r\n우리는 이제 Sass(SCSS)를 알아볼 것이고 컴파일 방법에 대해서도 같이 살펴보겠습니다.\r\n\r\n### 왜 Sass(SCSS)죠?\r\n\r\n보통 언급되는 전처리기 3대장으로 Less, Sass(SCSS), Stylus가 있습니다.\r\n\r\n저는 가장 많이 사용하고 진입장벽이 비교적 낮았던 Less를 처음 사용했습니다.  \r\n기본적인 기능은 전처리기들이 다 비슷합니다만 개인적으로 Less는 몇몇 기능에 큰 아쉬움이 있었습니다.  \r\n정확하게 언급하진 않겠지만 프로젝트 진행 중 Less에서 제공하는 기능의 한계로 막히는 경우가 몇 번 있었는데 그 기능이 Sass나 Stylus에는 있었습니다.  \r\n하지만 진입장벽이 낮기 때문에 접하기 쉽고 그만큼 많이 사용되는 듯합니다.\r\n\r\nStylus 같은 경우는 현재 이 블로그(HEROPY)를 만들면서 사용하고 있습니다.  \r\n깔끔하고 좀 더 세련됐으며 기능도 훌륭합니다.  \r\n하지만 덜 사용되며(덜 유명하며) 비교적 늦게 나왔기 때문에 성숙도는 떨어집니다.  \r\n그 때문인지 컴파일 후 사소한 버그가 몇몇 보입니다.\r\n\r\nSass(SCSS)는 언급한 두 가지 전처리기의 장점을 모두 가집니다.  \r\n문법은 Sass가 Stylus와 비슷하고, SCSS는 Less와 비슷하며, Sass와 SCSS는 하나의 컴파일러로 모두 컴파일 가능합니다.  \r\n또한, 2006년부터 시작하여 가장 오래된 CSS 확장 언어이며 그만큼 높은 성숙도와 많은 커뮤니티를 가지고 있고 기능도 훌륭합니다.  \r\n그래서 저는 Sass(SCSS)를 선택했습니다.\r\n\r\n### Sass와 SCSS는 차이점은 뭔가요?\r\n\r\nSass(Syntactically Awesome Style Sheets)의 3버전에서 새롭게 등장한 SCSS는 CSS 구문과 완전히 호환되도록 새로운 구문을 도입해 만든 Sass의 모든 기능을 지원하는 CSS의 상위집합(Superset) 입니다.  \r\n즉, SCSS는 CSS와 거의 같은 문법으로 Sass 기능을 지원한다는 말입니다.\r\n\r\n더 쉽고 간단한 차이는 `{}`(중괄호)와 `;`(세미콜론)의 유무입니다.  \r\n아래의 예제를 비교해 보세요.\r\n\r\nSass:\r\n\r\n```sass\r\n.list\r\n  width: 100px\r\n  float: left\r\n  li\r\n    color: red\r\n    background: url(\"./image.jpg\")\r\n    &:last-child\r\n      margin-right: -10px\r\n\r\n```\r\n\r\nSCSS:\r\n\r\n```scss\r\n.list {\r\n  width: 100px;\r\n  float: left;\r\n  li {\r\n    color: red;\r\n    background: url(\"./image.jpg\");\r\n    &:last-child {\r\n      margin-right: -10px;\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\nSass는 선택자의 유효범위를 ‘들여쓰기’로 구분하고, SCSS는 `{}`로 범위를 구분합니다.  \r\nSass 방식과 SCSS 방식 중 어떤 방식이 마음에 드세요?\r\n\r\n거의 유일합니다만, 다른 차이도 있습니다.  \r\n아래는 Mixins(‘믹스인’은 재사용 가능한 기능을 만드는 방식의 의미합니다) 예제입니다.  \r\nSass는 단축 구문으로 사용합니다.\r\n\r\n:Sass\r\n\r\n```sass\r\n=border-radius($radius)\r\n  -webkit-border-radius: $radius\r\n  -moz-border-radius:    $radius\r\n  -ms-border-radius:     $radius\r\n  border-radius:         $radius\r\n\r\n.box\r\n  +border-radius(10px)\r\n\r\n```\r\n\r\n:SCSS\r\n\r\n```scss\r\n@mixin border-radius($radius) {\r\n  -webkit-border-radius: $radius;\r\n     -moz-border-radius: $radius;\r\n      -ms-border-radius: $radius;\r\n          border-radius: $radius;\r\n}\r\n\r\n.box { @include border-radius(10px); }\r\n\r\n```\r\n\r\nSass는 `=`와 `+` 기호로 Mixins 기능을 사용했고,  \r\nSCSS는 `@mixin`과 `@include`로 기능을 사용했습니다.\r\n\r\n단순한 몇 가지를 제외하면 거의 차이가 없지만 복잡한 문장이 될 경우 여러 환경에 따른 장단점이 있을 수 있습니다.  \r\nSass는 좀 더 간결하고 작성하기 편리하며, `{}`나 `;`를 사용하지 않아도 되니 코드가 훨씬 깔끔해집니다.  \r\nSCSS는 인라인 코드(한 줄 작성)를 작성할 수 있고, CSS와 유사한 문법을 가지기 때문에 코드 통합이 훨씬 쉽습니다.\r\n\r\n이렇게 몇몇 장단점이 있기 때문에 회사나 팀에서 원하는 방식을 사용해야 하거나, 개인 취향에 따라서 선택할 수 있습니다.  \r\n단지 상황에 맞는, 원하는 방식으로 골라서 사용하면 됩니다.\r\n\r\n보통의 경우 SCSS를 추천합니다.\r\n\r\n# 컴파일 방법\r\n\r\nSass(SCSS)는 웹에서 직접 동작할 수 없습니다.  \r\n어디까지나 최종에는 표준 CSS로 동작해야 하며, 우리는 전처리기로 작성 후 CSS로 컴파일해야 합니다.  \r\n다양한 방법으로 컴파일이 가능하지만 자바스크립트 개발 환경([Node.js](https://nodejs.org/ko/))에서 추천하는 몇가지 방법을 소개합니다.\r\n\r\n### SassMeister\r\n\r\n간단한 Sass 코드는 컴파일러를 설치하는게 부담될 수 있습니다.  \r\n그럴 경우 [SassMeister](https://www.sassmeister.com/)를 사용할 수 있습니다.\r\n\r\n페이지 접속 후 바로 Sass나 SCSS 문법으로 코딩하면 CSS로 실시간 변환됩니다.  \r\nHTML를 작성하여 적용된 결과를 보거나 Sass 버전 설정 등 여러 환경 설정들을 지원하니 학습에 도움이 될 것입니다.\r\n\r\n### node-sass\r\n\r\n[node-sass](https://github.com/sass/node-sass)는 Node.js를 컴파일러인 [LibSass](https://sass-lang.com/libsass)에 바인딩한 라이브러리 입니다.  \r\nNPM으로 전역 설치하여 사용합니다.\r\n\r\n```sass\r\n$ npm install -g node-sass\r\n\r\n```\r\n\r\n컴파일하려는 파일의 경로와 컴파일된 파일이 저장될 경로를 설정합니다.  \r\n`[]`는 선택사항입니다.\r\n\r\n```sass\r\n$ node-sass [옵션] <입력파일경로> [출력파일경로]\r\n\r\n```\r\n\r\n```sass\r\n$ node-sass scss/main.scss public/main.css\r\n\r\n```\r\n\r\n여러 출력 경로를 설정할 수 있습니다.\r\n\r\n```sass\r\n$ node-sass scss/main.scss public/main.css dist/style.css\r\n\r\n```sass\r\n\r\n옵션을 적용할 수도 있습니다.  \r\n옵션으로 `--watch` 혹은 `-w`를 입력하면, 런타임 중 파일을 감시하여 저장 시 자동으로 변경 사항을 컴파일합니다.\r\n\r\n```sass\r\n$ node-sass --watch scss/main.scss public/main.css\r\n\r\n```\r\n\r\n기타 옵션은 [node-sass CLI](https://github.com/sass/node-sass#command-line-interface)에서 확인할 수 있습니다.\r\n\r\n### Gulp\r\n\r\n빌드 자동화 도구(JavaScript Task Runner)인 [Gulp](https://gulpjs.com/)에서는 `gulpfile.js`을 만들어 아래와 같이 설정할 수 있습니다.  \r\n먼저 `gulp` 명령을 사용하기 위해서는 전역 설치가 필요합니다.\r\n\r\n```sass\r\n$ npm install -g gulp\r\n\r\n```\r\n\r\nGulp와 함께 Sass 컴파일러인 [gulp-sass](https://github.com/dlmanning/gulp-sass)를 개발 의존성(devDependency) 모드로 설치합니다.  \r\ngulp-sass는 위에서 살펴본 node-sass를 Gulp에서 사용할 수 있도록 만들어진 플러그인입니다.\r\n\r\n```sass\r\n$ npm install --save-dev gulp gulp-sass\r\n\r\n```\r\n\r\n```java\r\n// gulpfile.js\r\nvar gulp = require(\'gulp\')\r\nvar sass = require(\'gulp-sass\')\r\n\r\n// 일반 컴파일\r\ngulp.task(\'sass\', function () {\r\n  return gulp.src(\'./src/scss/*.scss\')  // 입력 경로\r\n    .pipe(sass().on(\'error\', sass.logError))\r\n    .pipe(gulp.dest(\'./dist/css\'));  // 출력 경로\r\n});\r\n\r\n// 런타임 중 파일 감시\r\ngulp.task(\'sass:watch\', function () {\r\n  gulp.watch(\'./src/scss/*.scss\', [\'sass\']);  // 입력 경로와 파일 변경 감지 시 실행할 Actions(Task Name)\r\n});\r\n\r\n```\r\n\r\n환경을 설정했으니 컴파일합니다.\r\n\r\n```java\r\n$ gulp sass\r\n\r\n```\r\n\r\n런타임 중 파일 감시 모드로 실행할 수도 있습니다.\r\n\r\n```java\r\n$ gulp sass:watch\r\n\r\n```\r\n\r\n### Webpack\r\n\r\nJavaScript 모듈화 도구인 [Webpack](https://webpack.js.org/)의 설정은 좀 더 복잡합니다.  \r\n[Webpack - 1 - 시작하기 / EJS / SASS(SCSS)](https://heropy.blog/2017/10/18/webpack_1_start_ejs_sass/) 포스트를 참고하세요.\r\n\r\n### Parcel\r\n\r\n웹 애플리케이션 번들러 [Parcel](https://parceljs.org/)은 굉장히 단순하게 컴파일할 수 있습니다.  \r\n좀 더 자세한 내용은 [Parcel - 시작하기 / SASS / PostCSS / Babel / Production](https://heropy.blog/2018/01/20/parcel-1-start/)을 참고하세요.\r\n\r\n우선 Parcel를 전역으로 설치합니다.\r\n\r\n```java\r\n$ npm install -g parcel-bundler\r\n\r\n```\r\n\r\n프로젝트에 Sass 컴파일러(node-sass)를 설치합니다.\r\n\r\n```java\r\n$ npm install --save-dev node-sass\r\n\r\n```\r\n\r\n이제 HTML에 `<link>`로 Sass 파일만 연결하면 됩니다.  \r\n다른 설정은 필요하지 않습니다.\r\n\r\n```java\r\n<link rel=\"stylesheet\" href=\"scss/main.scss\">\r\n\r\n```\r\n\r\n```java\r\n$ parcel index.html\r\n# 혹은\r\n$ parcel build index.html\r\n\r\n```\r\n\r\n`dist/`에서 컴파일된 Sass 파일을 볼 수 있고,  \r\n별도의 포트 번호를 설정하지 않았다면 `[http://localhost:1234](http://localhost:1234)`에 접속하여 적용 상태를 확인할 수 있습니다.\r\n\r\n# 문법(Syntax)\r\n\r\n위의 ‘Sass와 SCSS의 차이점’에서 설명한대로 Sass와 SCSS의 기능은 동일하니, 편의를 위해 SCSS 문법으로 설명을 진행합니다.  \r\n단, Sass와 SCSS의 차이점이 있다면 나눠 설명합니다.\r\n\r\n## 주석(Comment)\r\n\r\nCSS 주석은 `/* ... */` 입니다.  \r\nSass(SCSS)는 JavaScript처럼 두 가지 스타일의 주석을 사용합니다.\r\n\r\n```css\r\n// 컴파일되지 않는 주석\r\n/* 컴파일되는 주석 */\r\n\r\n```\r\n\r\nSass의 경우 컴파일되는 여러 줄 주석을 사용할 때 각 줄 앞에 `*`을 붙여야 하고, 중요한 것은 `*`의 라인을 맞춰줘야 합니다.\r\n\r\nSass:\r\n\r\n```css\r\n/* 컴파일되는\r\n * 여러 줄\r\n * 주석 */\r\n\r\n// Error\r\n/* 컴파일되는\r\n* 여러 줄\r\n    * 주석 */\r\n\r\n```\r\n\r\nSCSS는 각 줄에 `*`이 없어도 문제되지 않습니다. 따라서 기존 CSS와 호환이 쉽습니다.\r\n\r\nSCSS:\r\n\r\n```css\r\n/*\r\n컴파일되는\r\n여러 줄\r\n주석\r\n*/\r\n\r\n```\r\n\r\n## 데이터 종류(Data Types)\r\n\r\n| 데이터 | 설명 | 예시 |\r\n| --- | --- | --- |\r\n| Numbers | 숫자 | `1`, `.82`, `20px`, `2em`… |\r\n| Strings | 문자 | `bold`, `relative`, `\"/images/a.png\"`, `\"dotum\"` |\r\n| Colors | 색상 표현 | `red`, `blue`, `#FFFF00`, `rgba(255,0,0,.5)` |\r\n| Booleans | 논리 | `true`, `false` |\r\n| Nulls | 아무것도 없음 | `null` |\r\n| Lists | 공백이나 `,`로 구분된 값의 목록 | `(apple, orange, banana)`, `apple orange` |\r\n| Maps | Lists와 유사하나 값이 `Key: Value` 형태 | `(apple: a, orange: o, banana: b)` |\r\n\r\n### 특이사항\r\n\r\nSass에서 사용하는 데이터 종류들의 몇 가지 특이사항을 소개합니다.\r\n\r\n-   Numbers: 숫자에 단위가 있거나 없습니다.\r\n-   Strings: 문자에 따옴표가 있거나 없습니다.\r\n-   Nulls: 속성값으로 `null`이 사용되면 컴파일하지 않습니다.\r\n-   Lists: `()`를 붙이거나 붙이지 않습니다.\r\n-   Maps: `()`를 꼭 붙여야 합니다.\r\n\r\n## 중첩(Nesting)\r\n\r\nSass는 중첩 기능을 사용할 수 있습니다.  \r\n상위 선택자의 반복을 피하고 좀 더 편리하게 복잡한 구조를 작성할 수 있습니다.\r\n\r\nSCSS:\r\n\r\n```css\r\n.section {\r\n  width: 100%;\r\n  .list {\r\n    padding: 20px;\r\n    li {\r\n      float: left;\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```css\r\n.section {\r\n  width: 100%;\r\n}\r\n.section .list {\r\n  padding: 20px;\r\n}\r\n.section .list li {\r\n  float: left;\r\n}\r\n\r\n```\r\n\r\n### Ampersand (상위 선택자 참조)\r\n\r\n중첩 안에서 `&` 키워드는 상위(부모) 선택자를 참조하여 치환합니다.\r\n\r\nSCSS:\r\n\r\n```css\r\n.btn {\r\n  position: absolute;\r\n  &.active {\r\n    color: red;\r\n  }\r\n}\r\n\r\n.list {\r\n  li {\r\n    &:last-child {\r\n      margin-right: 0;\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.btn {\r\n  position: absolute;\r\n}\r\n.btn.active {\r\n  color: red;\r\n}\r\n.list li:last-child {\r\n  margin-right: 0;\r\n}\r\n\r\n```\r\n\r\n`&` 키워드가 참조한 상위 선택자로 치환되는 것이기 때문에 다음과 같이 응용할 수도 있습니다.\r\n\r\nSCSS:\r\n\r\n```\r\n.fs {\r\n  &-small { font-size: 12px; }\r\n  &-medium { font-size: 14px; }\r\n  &-large { font-size: 16px; }\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.fs-small {\r\n  font-size: 12px;\r\n}\r\n.fs-medium {\r\n  font-size: 14px;\r\n}\r\n.fs-large {\r\n  font-size: 16px;\r\n}\r\n\r\n```\r\n\r\n### @at-root (중첩 벗어나기)\r\n\r\n중첩에서 벗어나고 싶을 때 `@at-root` 키워드를 사용합니다.  \r\n중첩 안에서 생성하되 중첩 밖에서 사용해야 경우에 유용합니다.\r\n\r\nSCSS:\r\n\r\n```\r\n.list {\r\n  $w: 100px;\r\n  $h: 50px;\r\n  li {\r\n    width: $w;\r\n    height: $h;\r\n  }\r\n  @at-root .box {\r\n    width: $w;\r\n    height: $h;\r\n  }\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.list li {\r\n  width: 100px;\r\n  height: 50px;\r\n}\r\n.box {\r\n  width: 100px;\r\n  height: 50px;\r\n}\r\n\r\n```\r\n\r\n아래 예제 처럼 `.list` 안에 있는 특정 변수를 범위 밖에서 사용할 수 없기 때문에, 위 예제 처럼 `@at-root` 키워드를 사용해야 합니다.(변수는 아래에서 설명합니다)\r\n\r\n```\r\n.list {\r\n  $w: 100px;\r\n  $h: 50px;\r\n  li {\r\n    width: $w;\r\n    height: $h;\r\n  }\r\n}\r\n\r\n// Error\r\n.box {\r\n  width: $w;\r\n  height: $h;\r\n}\r\n\r\n```\r\n\r\n### 중첩된 속성\r\n\r\n`font-`, `margin-` 등과 같이 동일한 네임 스페이스를 가지는 속성들을 다음과 같이 사용할 수 있습니다.\r\n\r\nSCSS:\r\n\r\n```\r\n.box {\r\n  font: {\r\n    weight: bold;\r\n    size: 10px;\r\n    family: sans-serif;\r\n  };\r\n  margin: {\r\n    top: 10px;\r\n    left: 20px;\r\n  };\r\n  padding: {\r\n    bottom: 40px;\r\n    right: 30px;\r\n  };\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.box {\r\n  font-weight: bold;\r\n  font-size: 10px;\r\n  font-family: sans-serif;\r\n  margin-top: 10px;\r\n  margin-left: 20px;\r\n  padding-bottom: 40px;\r\n  padding-right: 30px;\r\n}\r\n\r\n```\r\n\r\n## 변수(Variables)\r\n\r\n반복적으로 사용되는 값을 변수로 지정할 수 있습니다.  \r\n변수 이름 앞에는 항상 `$`를 붙입니다.\r\n\r\n```\r\n$변수이름: 속성값;\r\n\r\n```\r\n\r\nSCSS:\r\n\r\n```\r\n$color-primary: #e96900;\r\n$url-images: \"/assets/images/\";\r\n$w: 200px;\r\n\r\n.box {\r\n  width: $w;\r\n  margin-left: $w;\r\n  background: $color-primary url($url-images + \"bg.jpg\");\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.box {\r\n  width: 200px;\r\n  margin-left: 200px;\r\n  background: #e96900 url(\"/assets/images/bg.jpg\");\r\n}\r\n\r\n```\r\n\r\n### 변수 유효범위(Variable Scope)\r\n\r\n변수는 사용 가능한 유효범위가 있습니다.  \r\n선언된 블록(`{}`) 내에서만 유효범위를 가집니다.\r\n\r\n변수 `$color`는 `.box1`의 블록 안에서 설정되었기 때문에, 블록 밖의 `.box2`에서는 사용할 수 없습니다.\r\n\r\n```\r\n.box1 {\r\n  $color: #111;\r\n  background: $color;\r\n}\r\n// Error\r\n.box2 {\r\n  background: $color;\r\n}\r\n\r\n```\r\n\r\n### 변수 재 할당(Variable Reassignment)\r\n\r\n다음과 같이 변수에 변수를 할당할 수 있습니다.\r\n\r\nSCSS:\r\n\r\n```\r\n$red: #FF0000;\r\n$blue: #0000FF;\r\n\r\n$color-primary: $blue;\r\n$color-danger: $red;\r\n\r\n.box {\r\n  color: $color-primary;\r\n  background: $color-danger;\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.box {\r\n  color: #0000FF;\r\n  background: #FF0000;\r\n}\r\n\r\n```\r\n\r\n### !global (전역 설정)\r\n\r\n`!global` 플래그를 사용하면 변수의 유효범위를 전역(Global)로 설정할 수 있습니다.\r\n\r\nSCSS:\r\n\r\n```\r\n.box1 {\r\n  $color: #111 !global;\r\n  background: $color;\r\n}\r\n.box2 {\r\n  background: $color;\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.box1 {\r\n  background: #111;\r\n}\r\n.box2 {\r\n  background: #111;\r\n}\r\n\r\n```\r\n\r\n대신 기존에 사용하던 같은 이름의 변수가 있을 경우 값이 덮어져 사용될 수 있습니다.\r\n\r\nSCSS:\r\n\r\n```\r\n$color: #000;\r\n.box1 {\r\n  $color: #111 !global;\r\n  background: $color;\r\n}\r\n.box2 {\r\n  background: $color;\r\n}\r\n.box3 {\r\n  $color: #222;\r\n  background: $color;\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.box1 {\r\n  background: #111;\r\n}\r\n.box2 {\r\n  background: #111;\r\n}\r\n.box3 {\r\n  background: #222;\r\n}\r\n\r\n```\r\n\r\n### !default (초깃값 설정)\r\n\r\n`!default` 플래그는 할당되지 않은 변수의 초깃값을 설정합니다.  \r\n즉, 할당되어있는 변수가 있다면 변수가 기존 할당 값을 사용합니다.\r\n\r\nSCSS:\r\n\r\n```\r\n$color-primary: red;\r\n\r\n.box {\r\n  $color-primary: blue !default;\r\n  background: $color-primary;\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.box {\r\n  background: red;\r\n}\r\n\r\n```\r\n\r\n좀 더 유용하게, ‘변수와 값을 설정하겠지만, 혹시 기존 변수가 있을 경우는 현재 설정하는 변수의 값은 사용하지 않겠다’는 의미로 쓸 수 있습니다.  \r\n예를 들어, [Bootstrap](https://github.com/twbs/bootstrap/tree/v4-dev/scss) 같은 외부 Sass(SCSS) 라이브러리를 연결했더니 변수 이름이 같아 내가 작성한 코드의 변수들이 Overwrite(덮어쓰기) 된다면 문제가 있겠죠.  \r\n반대로 내가 만든 Sass(SCSS) 라이브러리가 다른 사용자 코드의 변수들을 Overwrite 한다면, 사용자들은 그 라이브러리를 더 이상 사용하지 않을 것입니다.  \r\n이럴 때 Sass(SCSS) 라이브러리(혹은 새롭게 만든 모듈)에서 사용하는 변수에 `!default` 플래그가 있다면 기존 코드(원본)를 Overwrite 하지 않고도 사용할 수 있습니다.\r\n\r\n```\r\n// _config.scss\r\n$color-active: red;\r\n\r\n```\r\n\r\n```\r\n// main.scss\r\n@import \'config\';\r\n\r\n$color-active: blue !default;\r\n\r\n.box {\r\n  background: $color-active;  // red\r\n}\r\n\r\n```\r\n\r\n다음은 Bootstrap 코드([\\_variables.scss](https://github.com/twbs/bootstrap/blob/v4-dev/scss/_variables.scss))의 일부입니다.\r\n\r\n<script src=\"https://gist.github.com/ParkYoungWoong/3c1c1c326a38753161e06e78c8264b3d.js\"></script>\r\n\r\n<table class=\"highlight tab-size js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-_variables-scss-L1\" class=\"blob-num js-line-number\" data-line-number=\"1\">&nbsp;</td><td id=\"file-_variables-scss-LC1\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\"><span class=\"pl-c\">//</span> stylelint-disable</span></td></tr><tr><td id=\"file-_variables-scss-L2\" class=\"blob-num js-line-number\" data-line-number=\"2\">&nbsp;</td><td id=\"file-_variables-scss-LC2\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-v\">$white</span>: <span class=\"pl-c1\">#fff</span> <span class=\"pl-k\">!default</span>;</td></tr><tr><td id=\"file-_variables-scss-L3\" class=\"blob-num js-line-number\" data-line-number=\"3\">&nbsp;</td><td id=\"file-_variables-scss-LC3\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-v\">$gray-100</span>: <span class=\"pl-c1\">#f8f9fa</span> <span class=\"pl-k\">!default</span>;</td></tr><tr><td id=\"file-_variables-scss-L4\" class=\"blob-num js-line-number\" data-line-number=\"4\">&nbsp;</td><td id=\"file-_variables-scss-LC4\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-v\">$gray-200</span>: <span class=\"pl-c1\">#e9ecef</span> <span class=\"pl-k\">!default</span>;</td></tr><tr><td id=\"file-_variables-scss-L5\" class=\"blob-num js-line-number\" data-line-number=\"5\">&nbsp;</td><td id=\"file-_variables-scss-LC5\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-v\">$gray-300</span>: <span class=\"pl-c1\">#dee2e6</span> <span class=\"pl-k\">!default</span>;</td></tr><tr><td id=\"file-_variables-scss-L6\" class=\"blob-num js-line-number\" data-line-number=\"6\">&nbsp;</td><td id=\"file-_variables-scss-LC6\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-v\">$gray-400</span>: <span class=\"pl-c1\">#ced4da</span> <span class=\"pl-k\">!default</span>;</td></tr><tr><td id=\"file-_variables-scss-L7\" class=\"blob-num js-line-number\" data-line-number=\"7\">&nbsp;</td><td id=\"file-_variables-scss-LC7\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-v\">$gray-500</span>: <span class=\"pl-c1\">#adb5bd</span> <span class=\"pl-k\">!default</span>;</td></tr><tr><td id=\"file-_variables-scss-L8\" class=\"blob-num js-line-number\" data-line-number=\"8\">&nbsp;</td><td id=\"file-_variables-scss-LC8\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-v\">$gray-600</span>: <span class=\"pl-c1\">#6c757d</span> <span class=\"pl-k\">!default</span>;</td></tr><tr><td id=\"file-_variables-scss-L9\" class=\"blob-num js-line-number\" data-line-number=\"9\">&nbsp;</td><td id=\"file-_variables-scss-LC9\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-v\">$gray-700</span>: <span class=\"pl-c1\">#495057</span> <span class=\"pl-k\">!default</span>;</td></tr><tr><td id=\"file-_variables-scss-L10\" class=\"blob-num js-line-number\" data-line-number=\"10\">&nbsp;</td><td id=\"file-_variables-scss-LC10\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-v\">$gray-800</span>: <span class=\"pl-c1\">#343a40</span> <span class=\"pl-k\">!default</span>;</td></tr><tr><td id=\"file-_variables-scss-L11\" class=\"blob-num js-line-number\" data-line-number=\"11\">&nbsp;</td><td id=\"file-_variables-scss-LC11\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-v\">$gray-900</span>: <span class=\"pl-c1\">#212529</span> <span class=\"pl-k\">!default</span>;</td></tr><tr><td id=\"file-_variables-scss-L12\" class=\"blob-num js-line-number\" data-line-number=\"12\">&nbsp;</td><td id=\"file-_variables-scss-LC12\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-v\">$black</span>: <span class=\"pl-c1\">#000</span> <span class=\"pl-k\">!default</span>;</td></tr></tbody></table>\r\n\r\n[view raw](https://gist.github.com/ParkYoungWoong/3c1c1c326a38753161e06e78c8264b3d/raw/d1f8a93d7397ca4365feb29a2ede41653271a365/_variables.scss) [\\_variables.scss](https://gist.github.com/ParkYoungWoong/3c1c1c326a38753161e06e78c8264b3d#file-_variables-scss) hosted with ❤ by [GitHub](https://github.com)\r\n\r\n### #{} (문자 보간)\r\n\r\n`#{}`를 이용해서 코드의 어디든지 변수 값을 넣을 수 있습니다.\r\n\r\n```\r\n$family: unquote(\"Droid+Sans\");\r\n@import url(\"http://fonts.googleapis.com/css?family=#{$family}\");\r\n\r\n```\r\n\r\n```\r\n@import url(\"http://fonts.googleapis.com/css?family=Droid+Sans\");\r\n\r\n```\r\n\r\nSass의 내장 함수 `unquote()`는 문자에서 따옴표를 제거합니다.\r\n\r\n## 가져오기(Import)\r\n\r\n`@import`로 외부에서 가져온 Sass 파일은 모두 단일 CSS 출력 파일로 병합됩니다.  \r\n또한, 가져온 파일에 정의된 모든 변수 또는 Mixins 등을 주 파일에서 사용할 수 있습니다.\r\n\r\nSass `@import`는 기본적으로 Sass 파일을 가져오는데, CSS `@import` 규칙으로 컴파일되는 몇 가지 상황이 있습니다.\r\n\r\n-   파일 확장자가 `.css`일 때\r\n-   파일 이름이 `http://`로 시작하는 경우\r\n-   `url()`이 붙었을 경우\r\n-   미디어쿼리가 있는 경우\r\n\r\n위의 경우 CSS `@import` 규칙대로 컴파일 됩니다.\r\n\r\n```\r\n@import \"hello.css\";\r\n@import \"http://hello.com/hello\";\r\n@import url(hello);\r\n@import \"hello\" screen;\r\n\r\n```\r\n\r\n### 여러 파일 가져오기\r\n\r\n하나의 `@import`로 여러 파일을 가져올 수도 있습니다.  \r\n파일 이름은 `,`로 구분합니다.\r\n\r\n```\r\n@import \"header\", \"footer\";\r\n\r\n```\r\n\r\n### 파일 분할(Partials)\r\n\r\n프로젝트 규모가 커지면 파일들을 `header`나 `side-menu` 같이 각 기능과 부분으로 나눠 유지보수가 쉽도록 관리하게 됩니다.  \r\n이 경우 파일이 점점 많아지는데, 모든 파일이 컴파일 시 각각의 `~.css` 파일로 나눠서 저장된다면 관리나 성능 차원에서 문제가 될 수 있겠죠.  \r\n그래서 Sass는 Partials 기능을 지원합니다.  \r\n파일 이름 앞에 `_`를 붙여(`_header.scss`와 같이) `@import`로 가져오면 컴파일 시 `~.css` 파일로 컴파일하지 않습니다.\r\n\r\n예를 들어보겠습니다.  \r\n다음과 같이 `scss/` 안에 3개의 Sass 파일이 있습니다.\r\n\r\n```\r\nSass-App\r\n  # ...\r\n  ├─scss\r\n  │  ├─header.scss\r\n  │  ├─side-menu.scss\r\n  │  └─main.scss\r\n  # ...\r\n\r\n```\r\n\r\n`main.scss`로 나머지 `~.scss` 파일을 가져옵니다.\r\n\r\n```\r\n// main.scss\r\n@import \"header\", \"side-menu\";\r\n\r\n```\r\n\r\n그리고 이 파일들을 `css/`디렉토리로 컴파일합니다.  \r\n(컴파일은 위에서 설명한 `node-sass`로 진행합니다.)\r\n\r\n```\r\n# `scss`디렉토리에 있는 파일들을 `css`디렉토리로 컴파일\r\n$ node-sass scss --output css\r\n\r\n```\r\n\r\n컴파일 후 확인하면 아래와 같이 `scss/`에 있던 파일들이 `css/` 안에 각 하나씩의 파일로 컴파일됩니다.\r\n\r\n```\r\nSass-App\r\n  # ...\r\n  ├─css\r\n  │  ├─header.css\r\n  │  ├─side-menu.css\r\n  │  └─main.css\r\n  ├─scss\r\n  │  ├─header.scss\r\n  │  ├─side-menu.scss\r\n  │  └─main.scss\r\n  # ...\r\n\r\n```\r\n\r\n자, 이번에는 가져올 파일 이름에 `_`를 붙이겠습니다.  \r\n메인 파일인 `main.scss`에서는 `_`를 사용하지 않습니다.\r\n\r\n```\r\nSass-App\r\n  # ...\r\n  ├─scss\r\n  │  ├─_header.scss\r\n  │  ├─_side-menu.scss\r\n  │  └─main.scss\r\n  # ...\r\n\r\n```\r\n\r\n```\r\n// main.scss\r\n@import \"header\", \"side-menu\";\r\n\r\n```\r\n\r\n같은 방법으로 컴파일하면…\r\n\r\n```\r\n$ node-sass scss --output css\r\n\r\n```\r\n\r\n아래처럼 별도의 파일로 컴파일되지 않고 사용됩니다.\r\n\r\n```\r\nSass-App\r\n  # ...\r\n  ├─css\r\n  │  └─main.css  # main + header + side-menu\r\n  ├─scss\r\n  │  ├─header.scss\r\n  │  ├─side-menu.scss\r\n  │  └─main.scss\r\n  # ...\r\n\r\n```\r\n\r\n`Webpack`이나 `Parcel`, `Gulp` 같은 일반적인 빌드툴에서는 Partials 기능을 사용할 필요 없이, 설정된 값에 따라 빌드됩니다. 하지만 되도록 `_`를 사용할 것을 권장합니다.\r\n\r\n## 연산(Operations)\r\n\r\nSass는 기본적인 연산 기능을 지원합니다.  \r\n레이아웃 작업시 상황에 맞게 크기를 계산을 하거나 정해진 값을 나눠서 작성할 경우 유용합니다.  \r\n다음은 Sass에서 사용 가능한 연산자 종류 입니다.\r\n\r\n산술 연산자:\r\n\r\n| 종류 | 설명 | 주의사항 |\r\n| --- | --- | --- |\r\n| `+` | 더하기 |   |\r\n| `-` | 빼기 |   |\r\n| `*` | 곱하기 | 하나 이상의 값이 반드시 숫자(Number) |\r\n| `/` | 나누기 | 오른쪽 값이 반드시 숫자(Number) |\r\n| `%` | 나머지 |   |\r\n\r\n비교 연산자:\r\n\r\n| 종류 | 설명 |\r\n| --- | --- |\r\n| `==` | 동등 |\r\n| `!=` | 부등 |\r\n| `<` | 대소 / 보다 작은 |\r\n| `>` | 대소 / 보다 큰 |\r\n| `<=` | 대소 및 동등 / 보다 작거나 같은 |\r\n| `>=` | 대소 및 동등 / 보다 크거나 같은 |\r\n\r\n논리(불린, Boolean) 연산자:\r\n\r\n| 종류 | 설명 |\r\n| --- | --- |\r\n| `and` | 그리고 |\r\n| `or` | 또는 |\r\n| `not` | 부정 |\r\n\r\n### 숫자(Numbers)\r\n\r\n#### 상대적 단위 연산\r\n\r\n일반적으론 절댓값을 나타내는 `px` 단위로 연산을 합니다만, 상대적 단위(`%`, `em`, `vw` 등)의 연산의 경우 [CSS calc()](https://developer.mozilla.org/ko/docs/Web/CSS/calc)로 연산해야 합니다.\r\n\r\n```\r\nwidth: 50% - 20px;  // 단위 모순 에러(Incompatible units error)\r\nwidth: calc(50% - 20px);  // 연산 가능\r\n\r\n```\r\n\r\n#### 나누기 연산의 주의사항\r\n\r\nCSS는 속성 값의 숫자를 분리하는 방법으로 `/`를 허용하기 때문에 `/`가 나누기 연산으로 사용되지 않을 수 있습니다.  \r\n예를 들어, `font: 16px / 22px serif;` 같은 경우 `font-size: 16px`와 `line-height: 22px`의 속성값 분리를 위해서 `/`를 사용합니다.  \r\n아래 예제를 보면 나누기 연산자만 연산 되지 않고 그대로 컴파일됩니다.\r\n\r\nSCSS:\r\n\r\n```\r\ndiv {\r\n  width: 20px + 20px;  // 더하기\r\n  height: 40px - 10px;  // 빼기\r\n  font-size: 10px * 2;  // 곱하기\r\n  margin: 30px / 2;  // 나누기\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\ndiv {\r\n  width: 40px;  /* OK */\r\n  height: 30px;  /* OK */\r\n  font-size: 20px;  /* OK */\r\n  margin: 30px / 2;  /* ?? */\r\n}\r\n\r\n```\r\n\r\n따라서 `/`를 나누기 연산 기능으로 사용하려면 다음과 같은 조건을 충족해야 합니다.\r\n\r\n-   값 또는 그 일부가 변수에 저장되거나 함수에 의해 반환되는 경우\r\n-   값이 `()`로 묶여있는 경우\r\n-   값이 다른 산술 표현식의 일부로 사용되는 경우\r\n\r\nSCSS:\r\n\r\n```\r\ndiv {\r\n  $x: 100px;\r\n  width: $x / 2;  // 변수에 저장된 값을 나누기\r\n  height: (100px / 2);  // 괄호로 묶어서 나누기\r\n  font-size: 10px + 12px / 3;  // 더하기 연산과 같이 사용\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\ndiv {\r\n  width: 50px;\r\n  height: 50px;\r\n  font-size: 14px;\r\n}\r\n\r\n```\r\n\r\n### 문자(Strings)\r\n\r\n문자 연산에는 `+`가 사용됩니다.  \r\n문자 연산의 결과는 첫 번째 피연산자를 기준으로 합니다.  \r\n첫 번째 피연산자에 따옴표가 붙어있다면 연산 결과를 따옴표로 묶습니다.  \r\n반대로 첫 번째 피연산자에 따옴표가 붙어있지 않다면 연산 결과도 따옴표를 처리하지 않습니다.\r\n\r\nSCSS:\r\n\r\n```\r\ndiv::after {\r\n  content: \"Hello \" + World;\r\n  flex-flow: row + \"-reverse\" + \" \" + wrap\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\ndiv::after {\r\n  content: \"Hello World\";\r\n  flex-flow: row-reverse wrap;\r\n}\r\n\r\n```\r\n\r\n### 색상(Colors)\r\n\r\n색상도 연산할 수 있습니다.\r\n\r\nSCSS:\r\n\r\n```\r\ndiv {\r\n  color: #123456 + #345678;\r\n  // R: 12 + 34 = 46\r\n  // G: 34 + 56 = 8a\r\n  // B: 56 + 78 = ce\r\n  background: rgba(50, 100, 150, .5) + rgba(10, 20, 30, .5);\r\n  // R: 50 + 10 = 60\r\n  // G: 100 + 20 = 120\r\n  // B: 150 + 30 = 180\r\n  // A: Alpha channels must be equal\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\ndiv {\r\n  color: #468ace;\r\n  background: rgba(60, 120, 180, 0.5);\r\n}\r\n\r\n```\r\n\r\nRGBA에서 Alpha 값은 연산되지 않으며 서로 동일해야 다른 값의 연산이 가능합니다.  \r\nAlpha 값을 연산하기 위한 다음과 같은 색상 함수(Color Functions)를 사용할 수 있습니다.\r\n\r\n[opacify()](http://sass-lang.com/documentation/Sass/Script/Functions.html#opacify-instance_method), [transparentize()](http://sass-lang.com/documentation/Sass/Script/Functions.html#transparentize-instance_method)\r\n\r\nSCSS:\r\n\r\n```\r\n$color: rgba(10, 20, 30, .5);\r\ndiv {\r\n  color: opacify($color, .3);  // 30% 더 불투명하게 / 0.5 + 0.3\r\n  background-color: transparentize($color, .2);  // 20% 더 투명하게 / 0.5 - 0.2\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\ndiv {\r\n  color: rgba(10, 20, 30, 0.8);\r\n  background-color: rgba(10, 20, 30, 0.3);\r\n}\r\n\r\n```\r\n\r\n### 논리(Boolean)\r\n\r\nSass의 `@if` 조건문에서 사용되는 논리(Boolean) 연산에는 ‘그리고’,’ 또는’, ‘부정’이 있습니다.  \r\n자바스크립트 문법에 익숙하다면 `&&`, `||`, `!`와 같은 기능으로 생각하면 됩니다.\r\n\r\n| 종류 | 설명 |\r\n| --- | --- |\r\n| `and` | 그리고 |\r\n| `or` | 또는 |\r\n| `not` | 부정(반대) |\r\n\r\n간단한 예제를 확인하고, 더 자세한 내용은 조건문에서 살펴보겠습니다.\r\n\r\nSCSS:\r\n\r\n```\r\n$width: 90px;\r\ndiv {\r\n  @if not ($width > 100px) {\r\n    height: 300px;\r\n  }\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\ndiv {\r\n  height: 300px;\r\n}\r\n\r\n```\r\n\r\n## 재활용(Mixins)\r\n\r\nSass Mixins는 스타일 시트 전체에서 **재사용 할 CSS 선언 그룹** 을 정의하는 아주 훌륭한 기능입니다.  \r\n약간의 Mixin(믹스인)으로 다양한 스타일을 만들어낼 수 있습니다.\r\n\r\n우선, Mixin은 두 가지만 기억하면 됩니다.  \r\n선언하기(`@mixin`)와 포함하기(`@include`) 입니다.  \r\n만들어서(선언), 사용(포함)하는 거죠!\r\n\r\n### @mixin\r\n\r\n기본적인 Mixin 선언은 아주 간단합니다.  \r\n`@mixin` 지시어를 이용하여 스타일을 정의합니다.\r\n\r\n```\r\n// SCSS\r\n@mixin 믹스인이름 {\r\n  스타일;\r\n}\r\n\r\n// Sass\r\n=믹스인이름\r\n  스타일\r\n\r\n```\r\n\r\n```\r\n// SCSS\r\n@mixin large-text {\r\n  font-size: 22px;\r\n  font-weight: bold;\r\n  font-family: sans-serif;\r\n  color: orange;\r\n}\r\n\r\n// Sass\r\n=large-text\r\n  font-size: 22px\r\n  font-weight: bold\r\n  font-family: sans-serif\r\n  color: orange\r\n\r\n```\r\n\r\nMixin은 선택자를 포함 가능하고 상위(부모) 요소 참조(`&` 같은)도 할 수 있습니다.\r\n\r\n```\r\n@mixin large-text {\r\n  font: {\r\n    size: 22px;\r\n    weight: bold;\r\n    family: sans-serif;\r\n  }\r\n  color: orange;\r\n\r\n  &::after {\r\n    content: \"!!\";\r\n  }\r\n\r\n  span.icon {\r\n    background: url(\"/images/icon.png\");\r\n  }\r\n}\r\n\r\n```\r\n\r\n### @include\r\n\r\n선언된 Mixin을 사용(포함)하기 위해서는 `@include`가 필요합니다.  \r\n위에서 선언한 Mixin을 사용해 보겠습니다.\r\n\r\n```\r\n// SCSS\r\n@include 믹스인이름;\r\n\r\n// Sass\r\n+믹스인이름\r\n\r\n```\r\n\r\nSCSS:\r\n\r\n```\r\n// SCSS\r\nh1 {\r\n  @include large-text;\r\n}\r\ndiv {\r\n  @include large-text;\r\n}\r\n\r\n// Sass\r\nh1\r\n  +large-text\r\ndiv\r\n  +large-text\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\nh1 {\r\n  font-size: 22px;\r\n  font-weight: bold;\r\n  font-family: sans-serif;\r\n  color: orange;\r\n}\r\nh1::after {\r\n  content: \"!!\";\r\n}\r\nh1 span.icon {\r\n  background: url(\"/images/icon.png\");\r\n}\r\n\r\ndiv {\r\n  font-size: 22px;\r\n  font-weight: bold;\r\n  font-family: sans-serif;\r\n  color: orange;\r\n}\r\ndiv::after {\r\n  content: \"!!\";\r\n}\r\ndiv span.icon {\r\n  background: url(\"/images/icon.png\");\r\n}\r\n\r\n```\r\n\r\n### 인수(Arguments)\r\n\r\nMixin은 함수(Functions)처럼 인수(Arguments)를 가질 수 있습니다.  \r\n하나의 Mixin으로 다양한 결과를 만들 수 있습니다.\r\n\r\n```\r\n// SCSS\r\n@mixin 믹스인이름($매개변수) {\r\n  스타일;\r\n}\r\n@include 믹스인이름(인수);\r\n\r\n// Sass\r\n=믹스인이름($매개변수)\r\n  스타일\r\n\r\n+믹스인이름(인수)\r\n\r\n```\r\n\r\n> 매개변수(Parameters)란 변수의 한 종류로, 제공되는 여러 데이터 중 하나를 가리키기 위해 사용된다.  \r\n> 제공되는 여러 데이터들을 전달인수(Arguments) 라고 부른다.\r\n\r\nSCSS:\r\n\r\n```\r\n@mixin dash-line($width, $color) {\r\n  border: $width dashed $color;\r\n}\r\n\r\n.box1 { @include dash-line(1px, red); }\r\n.box2 { @include dash-line(4px, blue); }\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.box1 {\r\n  border: 1px dashed red;\r\n}\r\n.box2 {\r\n  border: 4px dashed blue;\r\n}\r\n\r\n```\r\n\r\n#### 인수의 기본값 설정\r\n\r\n인수(argument)는 기본값(default value)을 가질 수 있습니다.  \r\n`@include` 포함 단계에서 별도의 인수가 전달되지 않으면 기본값이 사용됩니다.\r\n\r\n```\r\n@mixin 믹스인이름($매개변수: 기본값) {\r\n  스타일;\r\n}\r\n\r\n```\r\n\r\nSCSS:\r\n\r\n```\r\n@mixin dash-line($width: 1px, $color: black) {\r\n  border: $width dashed $color;\r\n}\r\n\r\n.box1 { @include dash-line; }\r\n.box2 { @include dash-line(4px); }\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.box1 {\r\n  border: 1px dashed black;\r\n}\r\n.box2 {\r\n  border: 4px dashed black;\r\n}\r\n\r\n```\r\n\r\n#### 키워드 인수(Keyword Arguments)\r\n\r\n```\r\n@mixin 믹스인이름($매개변수A: 기본값, $매개변수B: 기본값) {\r\n  스타일;\r\n}\r\n\r\n@include 믹스인이름($매개변수B: 인수);\r\n\r\n```\r\n\r\nMixin에 전달할 인수를 입력할 때 명시적으로 키워드(변수)를 입력하여 작성할 수 있습니다.  \r\n별도의 인수 입력 순서를 필요로 하지 않아 편리하게 작성할 수 있습니다.  \r\n단, 작성하지 않은 인수가 적용될 수 있도록 기본값을 설정해 주는 것이 좋습니다.\r\n\r\n```\r\n@mixin position(\r\n  $p: absolute,\r\n  $t: null,\r\n  $b: null,\r\n  $l: null,\r\n  $r: null\r\n) {\r\n  position: $p;\r\n  top: $t;\r\n  bottom: $b;\r\n  left: $l;\r\n  right: $r;\r\n}\r\n\r\n.absolute {\r\n  // 키워드 인수로 설정할 값만 전달\r\n  @include position($b: 10px, $r: 20px);\r\n}\r\n.fixed {\r\n  // 인수가 많아짐에 따라 가독성을 확보하기 위해 줄바꿈\r\n  @include position(\r\n    fixed,\r\n    $t: 30px,\r\n    $r: 40px\r\n  );\r\n}\r\n\r\n```\r\n\r\n```\r\n.absolute {\r\n  position: absolute;\r\n  bottom: 10px;\r\n  right: 20px;\r\n}\r\n.fixed {\r\n  position: fixed;\r\n  top: 30px;\r\n  right: 40px;\r\n}\r\n\r\n```\r\n\r\n#### 가변 인수(Variable Arguments)\r\n\r\n때때로 입력할 인수의 개수가 불확실한 경우가 있습니다.  \r\n그럴 경우 가변 인수를 사용할 수 있습니다.  \r\n가변 인수는 매개변수 뒤에 `...`을 붙여줍니다.\r\n\r\n```\r\n@mixin 믹스인이름($매개변수...) {\r\n  스타일;\r\n}\r\n\r\n@include 믹스인이름(인수A, 인수B, 인수C);\r\n\r\n```\r\n\r\n```\r\n// 인수를 순서대로 하나씩 전달 받다가, 3번째 매개변수($bg-values)는 인수의 개수에 상관없이 받음\r\n@mixin bg($width, $height, $bg-values...) {\r\n  width: $width;\r\n  height: $height;\r\n  background: $bg-values;\r\n}\r\n\r\ndiv {\r\n  // 위의 Mixin(bg) 설정에 맞게 인수를 순서대로 전달하다가 3번째 이후부터는 개수에 상관없이 전달\r\n  @include bg(\r\n    100px,\r\n    200px,\r\n    url(\"/images/a.png\") no-repeat 10px 20px,\r\n    url(\"/images/b.png\") no-repeat,\r\n    url(\"/images/c.png\")\r\n  );\r\n}\r\n\r\n```\r\n\r\n```\r\ndiv {\r\n  width: 100px;\r\n  height: 200px;\r\n  background: url(\"/images/a.png\") no-repeat 10px 20px,\r\n              url(\"/images/b.png\") no-repeat,\r\n              url(\"/images/c.png\");\r\n}\r\n\r\n```\r\n\r\n위에선 인수를 받는 매개변수에 `...`을 사용하여 가변 인수를 활용했습니다.  \r\n이번엔 반대로 가변 인수를 전달할 값으로 사용해 보겠습니다.\r\n\r\n```\r\n@mixin font(\r\n  $style: normal,\r\n  $weight: normal,\r\n  $size: 16px,\r\n  $family: sans-serif\r\n) {\r\n  font: {\r\n    style: $style;\r\n    weight: $weight;\r\n    size: $size;\r\n    family: $family;\r\n  }\r\n}\r\ndiv {\r\n  // 매개변수 순서와 개수에 맞게 전달\r\n  $font-values: italic, bold, 16px, sans-serif;\r\n  @include font($font-values...);\r\n}\r\nspan {\r\n  // 필요한 값만 키워드 인수로 변수에 담아 전달\r\n  $font-values: (style: italic, size: 22px);\r\n  @include font($font-values...);\r\n}\r\na {\r\n  // 필요한 값만 키워드 인수로 전달\r\n  @include font((weight: 900, family: monospace)...);\r\n}\r\n\r\n```\r\n\r\n```\r\ndiv {\r\n  font-style: italic;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  font-family: sans-serif;\r\n}\r\nspan {\r\n  font-style: italic;\r\n  font-weight: normal;\r\n  font-size: 22px;\r\n  font-family: sans-serif;\r\n}\r\na {\r\n  font-style: normal;\r\n  font-weight: 900;\r\n  font-size: 16px;\r\n  font-family: monospace;\r\n}\r\n\r\n```\r\n\r\n### @content\r\n\r\n선언된 Mixin에 `@content`이 포함되어 있다면 해당 부분에 원하는 **스타일 블록** 을 전달할 수 있습니다.  \r\n이 방식을 사용하여 기존 Mixin이 가지고 있는 기능에 선택자나 속성 등을 추가할 수 있습니다.\r\n\r\n```\r\n@mixin 믹스인이름() {\r\n  스타일;\r\n  @content;\r\n}\r\n\r\n@include 믹스인이름() {\r\n  // 스타일 블록\r\n  스타일;\r\n}\r\n\r\n```\r\n\r\nSCSS:\r\n\r\n```\r\n@mixin icon($url) {\r\n  &::after {\r\n    content: $url;\r\n    @content;\r\n  }\r\n}\r\n.icon1 {\r\n  // icon Mixin의 기존 기능만 사용\r\n  @include icon(\"/images/icon.png\");\r\n}\r\n.icon2 {\r\n  // icon Mixin에 스타일 블록을 추가하여 사용\r\n  @include icon(\"/images/icon.png\") {\r\n    position: absolute;\r\n  };\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.icon1::after {\r\n  content: \"/images/icon.png\";\r\n}\r\n.icon2::after {\r\n  content: \"/images/icon.png\";\r\n  position: absolute;\r\n}\r\n\r\n```\r\n\r\nMixin에게 전달된 스타일 블록은 Mixin의 범위가 아니라 스타일 블록이 정의된 범위에서 평가됩니다.  \r\n즉, Mixin의 매개변수는 전달된 스타일 블록 안에서 사용되지 않고 전역 값으로 해석됩니다.  \r\n전역 변수(Global variables)와 지역 변수(Local variables)를 생각하면 좀 더 쉽습니다.\r\n\r\nSCSS:\r\n\r\n```\r\n$color: red;\r\n\r\n@mixin colors($color: blue) {\r\n  // Mixin의 범위\r\n  @content;\r\n  background-color: $color;\r\n  border-color: $color;\r\n}\r\n\r\ndiv {\r\n  @include colors() {\r\n    // 스타일 블록이 정의된 범위\r\n    color: $color;\r\n  }\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\ndiv {\r\n  color: red;\r\n  background-color: blue;\r\n  border-color: blue;\r\n}\r\n\r\n```\r\n\r\n## 확장(Extend)\r\n\r\n특정 선택자가 다른 선택자의 모든 스타일을 가져야하는 경우가 종종 있습니다.  \r\n이럴 경우 선택자의 확장 기능을 사용할 수 있습니다.  \r\n다음 예제를 봅시다.\r\n\r\n```\r\n@extend 선택자;\r\n\r\n```\r\n\r\nSCSS:\r\n\r\n```\r\n.btn {\r\n  padding: 10px;\r\n  margin: 10px;\r\n  background: blue;\r\n}\r\n.btn-danger {\r\n  @extend .btn;\r\n  background: red;\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.btn, .btn-danger {\r\n  padding: 10px;\r\n  margin: 10px;\r\n  background: blue;\r\n}\r\n.btn-danger {\r\n  background: red;\r\n}\r\n\r\n```\r\n\r\n컴파일된 결과가 마음에 드시나요?  \r\n결과를 보면 `,`로 구분하는 다중 선택자(Multiple Selector)가 만들어졌습니다.\r\n\r\n사실 `@extend`는 다음과 같은 문제를 고려해야 합니다.\r\n\r\n-   내 현재 선택자(위 예제의 `.btn-danger`)가 어디에 첨부될 것인가?\r\n-   원치 않는 부작용이 초래될 수도 있는가?\r\n-   이 한 번의 확장으로 얼마나 큰 CSS가 생성되는가?\r\n\r\n결과적으로 확장(Extend) 기능은 무해하거나 혹은 유익할 수도 있지만 그만큼 **부작용**을 가지고 있을 수 있습니다.  \r\n따라서 확장은 사용을 권장하지 않으며, 위에서 살펴본 **Mixin을 대체 기능으로 사용**하세요.\r\n\r\n사용을 권장하지 않는 이유에 대해서 좀 더 자세한 정보를 원하면 [Sass Guidelines Extend](https://sass-guidelin.es/ko/#extend)를 참고하세요.\r\n\r\n## 함수(Functions)\r\n\r\n자신의 함수를 정의하여 사용할 수 있습니다.  \r\n함수와 Mixins은 거의 유사하지만 반환되는 내용이 다릅니다.\r\n\r\nMixin은 위에서 살펴본 대로 지정한 스타일(Style)을 반환하는 반면,  \r\n함수는 보통 연산된(Computed) 특정 **값**을 `@return` 지시어를 통해 반환합니다.\r\n\r\n```\r\n// Mixins\r\n@mixin 믹스인이름($매개변수) {\r\n  스타일;\r\n}\r\n\r\n// Functions\r\n@function 함수이름($매개변수) {\r\n  @return 값\r\n}\r\n\r\n```\r\n\r\n사용하는 방법에도 차이가 있습니다.  \r\nMixin은 `@include` 지시어를 사용하는 반면,  \r\n함수는 함수이름으로 바로 사용합니다.\r\n\r\n```\r\n// Mixin\r\n@include 믹스인이름(인수);\r\n\r\n// Functions\r\n함수이름(인수)\r\n\r\n```\r\n\r\nSCSS:\r\n\r\n```\r\n$max-width: 980px;\r\n\r\n@function columns($number: 1, $columns: 12) {\r\n  @return $max-width * ($number / $columns)\r\n}\r\n\r\n.box_group {\r\n  width: $max-width;\r\n\r\n  .box1 {\r\n    width: columns();  // 1\r\n  }\r\n  .box2 {\r\n    width: columns(8);\r\n  }\r\n  .box3 {\r\n    width: columns(3);\r\n  }\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.box_group {\r\n  /* 총 너비 */\r\n  width: 980px;\r\n}\r\n.box_group .box1 {\r\n  /* 총 너비의 약 8.3% */\r\n  width: 81.66667px;\r\n}\r\n.box_group .box2 {\r\n  /* 총 너비의 약 66.7% */\r\n  width: 653.33333px;\r\n}\r\n.box_group .box3 {\r\n  /* 총 너비의 25% */\r\n  width: 245px;\r\n}\r\n\r\n```\r\n\r\n위와 같이 함수는 `@include` 같은 별도의 지시어 없이 사용하기 때문에 내가 지정한 함수와 내장 함수(Built-in Functions)의 이름이 충돌할 수 있습니다.  \r\n따라서 내가 지정한 함수에는 별도의 접두어를 붙여주는 것이 좋습니다.\r\n\r\n> 내장 함수란, 응용 프로그램에 내장되어 있으며 최종 사용자가 액세스 할 수 있는 기능입니다.  \r\n> 예를 들어, 대부분의 스프레드 시트 응용 프로그램은 행이나 열의 모든 셀을 추가하는 내장 SUM 함수를 지원합니다.\r\n\r\n예를 들어, 색의 빨강 성분을 가져오는 내장 함수로 이미 `red()`가 있습니다.  \r\n같은 이름을 사용하여 함수를 정의하면 이름이 충돌하기 때문에 별도의 접두어를 붙여 `extract-red()` 같은 이름을 만들 수 있습니다.\r\n\r\n```\r\n// 내가 정의한 함수\r\n@function extract-red($color) {\r\n  // 내장 함수\r\n  @return rgb(red($color), 0, 0);\r\n}\r\n\r\ndiv {\r\n  color: extract-red(#D55A93);\r\n}\r\n\r\n```\r\n\r\n혹은 모든 내장 함수의 이름을 다 알고 있을 수 없기 때문에 특별한 이름을 접두어로 사용할 수도 있습니다.  \r\n`my-custom-func-red()`\r\n\r\n## 조건과 반복(Control Directives / Expressions)\r\n\r\n### if (함수)\r\n\r\n조건의 값(`true`, `false`)에 따라 두 개의 표현식 중 하나만 반환합니다.  \r\n[조건부 삼항 연산자(conditional ternary operator)](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Conditional_Operator)와 비슷합니다.\r\n\r\n조건의 값이 `true`이면 `표현식1`을,  \r\n조건의 값이 `false`이면 `표현식2`를 실행합니다.\r\n\r\n```\r\nif(조건, 표현식1, 표현식2)\r\n\r\n```\r\n\r\nSCSS:\r\n\r\n```\r\n$width: 555px;\r\ndiv {\r\n  width: if($width > 300px, $width, null);\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\ndiv {\r\n  width: 555px;\r\n}\r\n\r\n```\r\n\r\n### @if (지시어)\r\n\r\n`@if` 지시어는 조건에 따른 분기 처리가 가능하며, [if 문(if statements)](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/if...else)과 유사합니다.  \r\n같이 사용할 수 있는 지시어는 `@else`, `if`가 있습니다.  \r\n추가 지시어를 사용하면 좀 더 복잡한 조건문을 작성할 수 있습니다.\r\n\r\n```\r\n// @if\r\n@if (조건) {\r\n  /* 조건이 참일 때 구문 */\r\n}\r\n\r\n// @if @else\r\n@if (조건) {\r\n  /* 조건이 참일 때 구문 */\r\n} @else {\r\n  /* 조건이 거짓일 때 구문 */\r\n}\r\n\r\n// @if @else if\r\n@if (조건1) {\r\n  /* 조건1이 참일 때 구문 */\r\n} @else if (조건2) {\r\n  /* 조건2가 참일 때 구문 */\r\n} @else {\r\n  /* 모두 거짓일 때 구문 */\r\n}\r\n\r\n```\r\n\r\n조건에 `()`는 생략이 가능하기 때문에, `()` 없이 작성하는 방법이 좀 더 편리할 수 있습니다.\r\n\r\n```\r\n$bg: true;\r\ndiv {\r\n  @if $bg {\r\n    background: url(\"/images/a.jpg\");\r\n  }\r\n}\r\n\r\n```\r\n\r\nSCSS:\r\n\r\n```\r\n$color: orange;\r\ndiv {\r\n  @if $color == strawberry {\r\n    color: #FE2E2E;\r\n  } @else if $color == orange {\r\n    color: #FE9A2E;\r\n  } @else if $color == banana {\r\n    color: #FFFF00;\r\n  } @else {\r\n    color: #2A1B0A;\r\n  }\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\ndiv {\r\n  color: #FE9A2E;\r\n}\r\n\r\n```\r\n\r\n조건에는 논리 연산자 `and`, `or`, `not`을 사용할 수 있습니다.\r\n\r\nSCSS:\r\n\r\n```\r\n@function limitSize($size) {\r\n  @if $size >= 0 and $size <= 200px {\r\n    @return 200px;\r\n  } @else {\r\n    @return 800px;\r\n  }\r\n}\r\n\r\ndiv {\r\n  width: limitSize(180px);\r\n  height: limitSize(340px);\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\ndiv {\r\n  width: 200px;\r\n  height: 800px;\r\n}\r\n\r\n```\r\n\r\n좀 더 복잡하지만 실용적인 예제를 봅시다.  \r\nSass의 내장 함수 `unitless()`는 숫자에 단위가 있는지 여부를 반환합니다.\r\n\r\nSCSS:\r\n\r\n```\r\n@mixin pCenter($w, $h, $p: absolute) {\r\n  @if\r\n    $p == absolute\r\n    or $p == fixed\r\n    or not $p == relative\r\n    or not $p == static\r\n  {\r\n    width: if(unitless($w), #{$w}px, $w);\r\n    height: if(unitless($h), #{$h}px, $h);\r\n    position: $p;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    margin: auto;\r\n  }\r\n}\r\n\r\n.box1 {\r\n  @include pCenter(10px, 20px);\r\n}\r\n.box2 {\r\n  @include pCenter(50, 50, fixed);\r\n}\r\n.box3 {\r\n  @include pCenter(100, 200, relative);\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.box1 {\r\n  width: 10px;\r\n  height: 20px;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  margin: auto;\r\n}\r\n\r\n.box2 {\r\n  width: 50px;\r\n  height: 50px;\r\n  position: fixed;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  margin: auto;\r\n}\r\n\r\n```\r\n\r\n### @for\r\n\r\n`@for`는 스타일을 반복적으로 출력합니다.  \r\n[for 문](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/for)과 유사합니다.\r\n\r\n`@for`는 `through`를 사용하는 형식과 `to`를 사용하는 형식으로 나뉩니다.  \r\n두 형식은 종료 조건이 해석되는 방식이 다릅니다.\r\n\r\n```\r\n// through\r\n// 종료 만큼 반복\r\n@for $변수 from 시작 through 종료 {\r\n  // 반복 내용\r\n}\r\n\r\n// to\r\n// 종료 직전까지 반복\r\n@for $변수 from 시작 to 종료 {\r\n  // 반복 내용\r\n}\r\n\r\n```\r\n\r\n차이점을 이해하기 위해 다음 예제를 살펴봅시다.  \r\n변수는 관례상 `$i`를 사용합니다.\r\n\r\nSCSS:\r\n\r\n```\r\n// 1부터 3번 반복\r\n@for $i from 1 through 3 {\r\n  .through:nth-child(#{$i}) {\r\n    width : 20px * $i\r\n  }\r\n}\r\n\r\n// 1부터 3 직전까지만 반복(2번 반복)\r\n@for $i from 1 to 3 {\r\n  .to:nth-child(#{$i}) {\r\n    width : 20px * $i\r\n  }\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.through:nth-child(1) { width: 20px; }\r\n.through:nth-child(2) { width: 40px; }\r\n.through:nth-child(3) { width: 60px; }\r\n\r\n.to:nth-child(1) { width: 20px; }\r\n.to:nth-child(2) { width: 40px; }\r\n\r\n```\r\n\r\n`to`는 주어진 값 직전까지만 반복해야할 경우 유용할 수 있습니다.  \r\n그러나 `:nth-child()`에서 특히 유용하게 사용되는 `@for`는 일반적으로 `through`를 사용하길 권장합니다.\r\n\r\n### @each\r\n\r\n`@each`는 List와 Map 데이터를 반복할 때 사용합니다.  \r\n[for in 문](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/for...in)과 유사합니다.\r\n\r\n```\r\n@each $변수 in 데이터 {\r\n  // 반복 내용\r\n}\r\n\r\n```\r\n\r\nList 데이터를 반복해 보겠습니다.\r\n\r\nSCSS:\r\n\r\n```\r\n// List Data\r\n$fruits: (apple, orange, banana, mango);\r\n\r\n.fruits {\r\n  @each $fruit in $fruits {\r\n    li.#{$fruit} {\r\n      background: url(\"/images/#{$fruit}.png\");\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.fruits li.apple {\r\n  background: url(\"/images/apple.png\");\r\n}\r\n.fruits li.orange {\r\n  background: url(\"/images/orange.png\");\r\n}\r\n.fruits li.banana {\r\n  background: url(\"/images/banana.png\");\r\n}\r\n.fruits li.mango {\r\n  background: url(\"/images/mango.png\");\r\n}\r\n\r\n```\r\n\r\n혹시 매번 반복마다 Index 값이 필요하다면 다음과 같이 `index()` 내장 함수를 사용할 수 있습니다.\r\n\r\nSCSS:\r\n\r\n```\r\n$fruits: (apple, orange, banana, mango);\r\n\r\n.fruits {\r\n  @each $fruit in $fruits {\r\n    $i: index($fruits, $fruit);\r\n    li:nth-child(#{$i}) {\r\n      left: 50px * $i;\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.fruits li:nth-child(1) {\r\n  left: 50px;\r\n}\r\n.fruits li:nth-child(2) {\r\n  left: 100px;\r\n}\r\n.fruits li:nth-child(3) {\r\n  left: 150px;\r\n}\r\n.fruits li:nth-child(4) {\r\n  left: 200px;\r\n}\r\n\r\n```\r\n\r\n동시에 여러 개의 List 데이터를 반복 처리할 수도 있습니다.  \r\n단, 각 데이터의 Length가 같아야 합니다.\r\n\r\nSCSS:\r\n\r\n```\r\n$apple: (apple, korea);\r\n$orange: (orange, china);\r\n$banana: (banana, japan);\r\n\r\n@each $fruit, $country in $apple, $orange, $banana {\r\n  .box-#{$fruit} {\r\n    background: url(\"/images/#{$country}.png\");\r\n  }\r\n}\r\n\r\n```\r\n\r\nCompiled to:\r\n\r\n```\r\n.box-apple {\r\n  background: url(\"/images/korea.png\");\r\n}\r\n.box-orange {\r\n  background: url(\"/images/china.png\");\r\n}\r\n.box-banana {\r\n  background: url(\"/images/japan.png\");\r\n}\r\n\r\n```\r\n\r\nMap 데이터를 반복할 경우 하나의 데이터에 두 개의 변수가 필요합니다.\r\n\r\n```\r\n@each $key변수, $value변수 in 데이터 {\r\n  // 반복 내용\r\n}\r\n\r\n```\r\n\r\n```\r\n$fruits-data: (\r\n  apple: korea,\r\n  orange: china,\r\n  banana: japan\r\n);\r\n\r\n@each $fruit, $country in $fruits-data {\r\n  .box-#{$fruit} {\r\n    background: url(\"/images/#{$country}.png\");\r\n  }\r\n}\r\n\r\n```\r\n\r\n```\r\n.box-apple {\r\n  background: url(\"/images/korea.png\");\r\n}\r\n.box-orange {\r\n  background: url(\"/images/china.png\");\r\n}\r\n.box-banana {\r\n  background: url(\"/images/japan.png\");\r\n}\r\n\r\n```\r\n\r\n### @while\r\n\r\n`@while`은 조건이 `false`로 평가될 때까지 내용을 반복합니다.  \r\n[while 문](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/while)과 유사하게 잘못된 조건으로 인해 컴파일 중 무한 루프에 빠질 수 있습니다.  \r\n사용을 권장하지 않습니다.\r\n\r\n```\r\n@while 조건 {\r\n  // 반복 내용\r\n}\r\n\r\n```\r\n\r\n```\r\n$i: 6;\r\n\r\n@while $i > 0 {\r\n  .item-#{$i} {\r\n    width: 2px * $i;\r\n  }\r\n  $i: $i - 2;\r\n}\r\n\r\n```\r\n\r\n```\r\n.item-6 { width: 12px; }\r\n.item-4 { width: 8px; }\r\n.item-2 { width: 4px; }\r\n\r\n```\r\n\r\n## 내장 함수(Built-in Functions)\r\n\r\nSass에서 기본적으로 제공하는 내장 함수에는 많은 종류가 있습니다.  \r\n모두 소개하지 않고, 주관적 경험에 의거해 필요하거나 필요할 수 있는 함수만 정리했습니다.\r\n\r\n[Sass Built-in Functions](http://sass-lang.com/documentation/Sass/Script/Functions.html)에서 모든 내장 함수를 확인할 수 있습니다.\r\n\r\n-   `[]`는 선택 가능한 인수(argument)입니다.\r\n-   [Zero-based numbering](https://en.wikipedia.org/wiki/Zero-based_numbering)을 사용하지 않습니다.\r\n\r\n### 색상(RGB / HSL / Opacity) 함수\r\n\r\n[mix($color1, $color2)](http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method) : 두 개의 색을 섞습니다.\r\n\r\n[lighten($color, $amount)](http://sass-lang.com/documentation/Sass/Script/Functions.html#lighten-instance_method) : 더 밝은색을 만듭니다.\r\n\r\n[darken($color, $amount)](http://sass-lang.com/documentation/Sass/Script/Functions.html#darken-instance_method) : 더 어두운색을 만듭니다.\r\n\r\n[saturate($color, $amount)](http://sass-lang.com/documentation/Sass/Script/Functions.html#saturate-instance_method) : 색상의 채도를 올립니다.\r\n\r\n[desaturate($color, $amount)](http://sass-lang.com/documentation/Sass/Script/Functions.html#desaturate-instance_method) : 색상의 채도를 낮춥니다.\r\n\r\n[grayscale($color)](http://sass-lang.com/documentation/Sass/Script/Functions.html#grayscale-instance_method) : 색상을 회색으로 변환합니다.\r\n\r\n[invert($color)](http://sass-lang.com/documentation/Sass/Script/Functions.html#invert-instance_method) : 색상을 반전시킵니다.\r\n\r\n[rgba($color, $alpha)](http://sass-lang.com/documentation/Sass/Script/Functions.html#rgba-instance_method) : 색상의 투명도를 변경합니다.\r\n\r\n[opacify($color, $amount) / fade-in($color, $amount)](http://sass-lang.com/documentation/Sass/Script/Functions.html#opacify-instance_method) : 색상을 더 불투명하게 만듭니다.\r\n\r\n[transparentize($color, $amount) / fade-out($color, $amount)](http://sass-lang.com/documentation/Sass/Script/Functions.html#transparentize-instance_method) : 색상을 더 투명하게 만듭니다.\r\n\r\n### 문자(String) 함수\r\n\r\n[unquote($string)](http://sass-lang.com/documentation/Sass/Script/Functions.html#unquote-instance_method) : 문자에서 따옴표를 제거합니다.\r\n\r\n[quote($string)](http://sass-lang.com/documentation/Sass/Script/Functions.html#quote-instance_method) : 문자에 따옴표를 추가합니다.\r\n\r\n[str-insert($string, $insert, $index)](http://sass-lang.com/documentation/Sass/Script/Functions.html#str_insert-instance_method) : 문자의 index번째에 특정 문자를 삽입합니다.\r\n\r\n[str-index($string, $substring)](http://sass-lang.com/documentation/Sass/Script/Functions.html#str_index-instance_method) : 문자에서 특정 문자의 첫 index를 반환합니다.\r\n\r\n[str-slice($string, $start-at, \\[$end-at\\])](http://sass-lang.com/documentation/Sass/Script/Functions.html#str_slice-instance_method) : 문자에서 특정 문자(몇 번째 글자부터 몇 번째 글자까지)를 추출합니다.\r\n\r\n[to-upper-case($string)](http://sass-lang.com/documentation/Sass/Script/Functions.html#to_upper_case-instance_method) : 문자를 대문자를 변환합니다.\r\n\r\n[to-lower-case($string)](http://sass-lang.com/documentation/Sass/Script/Functions.html#to_lower_case-instance_method) : 문자를 소문자로 변환합니다.\r\n\r\n### 숫자(Number) 함수\r\n\r\n[percentage($number)](http://sass-lang.com/documentation/Sass/Script/Functions.html#percentage-instance_method) : 숫자(단위 무시)를 백분율로 변환합니다.\r\n\r\n[round($number)](http://sass-lang.com/documentation/Sass/Script/Functions.html#round-instance_method) : 정수로 반올림합니다.\r\n\r\n[ceil($number)](http://sass-lang.com/documentation/Sass/Script/Functions.html#ceil-instance_method) : 정수로 올림합니다.\r\n\r\n[floor($number)](http://sass-lang.com/documentation/Sass/Script/Functions.html#floor-instance_method) : 정수로 내림(버림)합니다.\r\n\r\n[abs($number)](http://sass-lang.com/documentation/Sass/Script/Functions.html#abs-instance_method) : 숫자의 절대 값을 반환합니다.\r\n\r\n[min($numbers…)](http://sass-lang.com/documentation/Sass/Script/Functions.html#min-instance_method) : 숫자 중 최소 값을 찾습니다.\r\n\r\n[max($numbers…)](http://sass-lang.com/documentation/Sass/Script/Functions.html#max-instance_method) : 숫자 중 최대 값을 찾습니다.\r\n\r\n[random()](http://sass-lang.com/documentation/Sass/Script/Functions.html#random-instance_method) : `0` 부터 `1` 사이의 난수를 반환합니다.\r\n\r\n### List 함수\r\n\r\n모든 List 내장 함수는 기존 List 데이터를 갱신하지 않고 새 List 데이터를 반환합니다.  \r\n모든 List 내장 함수는 Map 데이터에서도 사용할 수 있습니다.\r\n\r\n[length($list)](http://sass-lang.com/documentation/Sass/Script/Functions.html#length-instance_method) : List의 개수를 반환합니다.\r\n\r\n[nth($list, $n)](http://sass-lang.com/documentation/Sass/Script/Functions.html#nth-instance_method) : List에서 n번째 값을 반환합니다.\r\n\r\n[set-nth($list, $n, $value)](http://sass-lang.com/documentation/Sass/Script/Functions.html#set_nth-instance_method) : List에서 n번째 값을 다른 값으로 변경합니다.\r\n\r\n[join($list1, $list2, \\[$separator\\])](http://sass-lang.com/documentation/Sass/Script/Functions.html#join-instance_method) : 두 개의 List를 하나로 결합합니다.\r\n\r\n[zip($lists…)](http://sass-lang.com/documentation/Sass/Script/Functions.html#zip-instance_method) : 여러 List들을 하나의 다차원 List로 결합합니다.\r\n\r\n[index($list, $value)](http://sass-lang.com/documentation/Sass/Script/Functions.html#index-instance_method) : List에서 특정 값의 index를 반환합니다.\r\n\r\n### Map 함수\r\n\r\n모든 Map 내장 함수는 기존 Map 데이터를 갱신하지 않고 새 Map 데이터를 반환합니다.\r\n\r\n[map-get($map, $key)](http://sass-lang.com/documentation/Sass/Script/Functions.html#map_get-instance_method) : Map에서 특정 key의 value를 반환합니다.\r\n\r\n[map-merge($map1, $map2)](http://sass-lang.com/documentation/Sass/Script/Functions.html#map_merge-instance_method) : 두 개의 Map을 병합하여 새로운 Map를 만듭니다.\r\n\r\n[map-keys($map)](http://sass-lang.com/documentation/Sass/Script/Functions.html#map_keys-instance_method) : Map에서 모든 key를 List로 반환합니다.\r\n\r\n[map-values($map)](http://sass-lang.com/documentation/Sass/Script/Functions.html#map_values-instance_method) : Map에서 모든 value를 List로 반환합니다.\r\n\r\n### 관리(Introspection) 함수\r\n\r\n[variable-exists(name)](http://sass-lang.com/documentation/Sass/Script/Functions.html#variable_exists-instance_method) : 변수가 현재 범위에 존재하는지 여부를 반환합니다.(인수는 `$`없이 변수의 이름만 사용합니다.)\r\n\r\n[unit($number)](http://sass-lang.com/documentation/Sass/Script/Functions.html#unit-instance_method) : 숫자의 단위를 반환합니다.\r\n\r\n[unitless($number)](http://sass-lang.com/documentation/Sass/Script/Functions.html#unitless-instance_method) : 숫자에 단위가 있는지 여부를 반환합니다.\r\n\r\n[comparable($number1, $number2)](http://sass-lang.com/documentation/Sass/Script/Functions.html#comparable-instance_method) : 두 개의 숫자가 연산 가능한지 여부를 반환합니다.\r\n\r\n# 참고 자료(References)\r\n\r\n[http://sass-lang.com/documentation](http://sass-lang.com/documentation)  \r\n[https://www.sitepoint.com/sass-basics-operators/](https://www.sitepoint.com/sass-basics-operators/)  \r\n[https://sass-guidelin.es/ko/](https://sass-guidelin.es/ko/)  \r\n[http://www.thesassway.com/](http://www.thesassway.com/)',1,3,1,301,3),
(2,'2020-12-20 11:49:17','2020-12-31 01:19:13','CSS: href 속성, src 속성 절대경로, 상대경로','절대경로는 아시는 바와 같이 이미 지정되어 있어변경할 수 없는 경로를말합니다.\r\n\r\n페이지 안에 다른 서버에 있는 이미지나 페이지 등의 파일을 연결시킬 때 사용하는 경우입니다.\r\n\r\n`<a href=\"[http://XXXXX.co.kr](http://XXXXX.co.kr)\">사이트바로가기</a>`\r\n\r\n`<img src=\"[http://XXXX.co.kr/images/logo.jpg](http://XXXX.co.kr/images/logo.jpg)\" alt=\"혜정스블로그\">`\r\n\r\n일반적으로 하나의 웹페이지 또는 사이트를 제작할 때,\r\n\r\n제작의 효율성을 위해 파일의 형식이 같은 파일들을 하나의 폴더안에 저장합니다.\r\n\r\n​\r\n\r\n![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F7Ki1E%2FbtqP119h3fI%2FmyliVGnZaiUi6MkCTVMBiK%2Fimg.gif)\r\n\r\n**(1)현재 파일을 기준으로 동일 위치로 연결되는 경우**\r\n\r\n아래의 그림과 같은 폴더 구조를 가진 웹사이트에서\r\n\r\nindex.html 파일에 favicon.png 를 연결시키는 코딩을 하려고 합니다.\r\n\r\n![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FvFFoe%2FbtqPW0jt3RM%2FvX9xEqmKnSECQxJKfQmWn1%2Fimg.gif)\r\n\r\nindex.html 파일이 저장된 위치를 기준으로\r\n\r\nfavicon.png 파일은 동일한 위치에 저장되어 있기 때문에 파일명과 확장자를 함께 기재해주면 됩니다.\r\n\r\n\\-- index.html 파일  소스 중​\r\n\r\n`<link rel=\"icon\" type=\"image/png\" href=\"favicon.png\">`\r\n\r\n**(2) 현재 파일을 기준으로 하위폴더로 연결되는 경우**\r\n\r\n아래의 그림과 같은 폴더 구조를 가진 웹사이트에서\r\n\r\nindex.html 파일 내부에 images폴더에 있는 logo.gif를 연결시키는 코딩을 하려고 합니다.\r\n\r\n![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcBurNS%2FbtqPZKAceF8%2FSzxke8oS4PZMHdfxH3O6oK%2Fimg.gif)\r\n\r\nindex.html 파일이 저장된 위치를 기준으로 logo.gif 파일을 찾아갈 수 있도록 경로를 지정합니다.\r\n\r\n즉,  images 폴더를 들어가서, 폴더 안에 있는 logo.gif를 만날 수 있도록 경로를 설정해 주면 되겠습니다.\r\n\r\n폴더를 하나 들어갈 때마다,슬래쉬(/) 기호를 사용합니다.\r\n\r\n\\-- index.html 파일  소스 중\r\n\r\n`<img src=\"images/logo.gif\" alt=\"혜정스\">`\r\n\r\n**(3) 현재 파일을 기준으로 상위폴더로 연결되는 경우**\r\n\r\n아래의 그림과 같은 폴더 구조를 가진 웹사이트에서\r\n\r\nstyle.css 파일 내부에 images폴더에 있는 logo.gif를 배경이미지로 연결시키는 코딩을 하려고 합니다.\r\n\r\n![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbKpg1Z%2FbtqPWYeXPKv%2FkEVcox7uvwm857yPv6Qvl0%2Fimg.gif)\r\n\r\nstyle.css 파일이 저장된 위치를 기준으로 logo.gif 파일을 찾아갈 수 있도록 경로를 지정합니다.\r\n\r\n즉,  상위폴더인 css폴더를 벗어납니다.\r\n\r\n그런 후에 images 폴더를 들어가서,폴더 안에 있는  logo.gif 를 만날 수 있도록 경로를 설정해 주면 되겠습니다.\r\n\r\n폴더를 하나 들어갈 때마다,슬래쉬(/) 기호를 사용한다면, 상위폴더를 하나 벗어날때마다는 쩜. 쩜.슬래쉬 (../ ) 를 사용합니다.\r\n\r\n\\-- style.css 파일  소스 중\r\n\r\n.logo { background: url(../images/logo.gif) no-repeat; }\r\n\r\n현재의 index.html 파일은 상위 루트에 있는데\r\n\r\n똑같은 파일을 아래와 같이 pages 폴더를 만들고 index.html을 이동시켜 저장하였다면\r\n\r\n![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbzNNd1%2FbtqPRBdxWvn%2Fx8M3ATVyPVbGCKJa8K4Gok%2Fimg.gif)\r\n\r\n코딩을 어떻게 바뀔까요?\r\n\r\nindex.html 파일을 기준으로 logo.gif 파일을 연결시키기 때문에 폴더가 이동되면서 경로는 상대적으로 변하게 됩니다.\r\n\r\n즉, index.html 파일의 상위 폴더인 pages 폴더를 벗어나서 (../ ) images 폴더에 들어가는 경로로 지정해야 할 것입니다.\r\n\r\n\\-- index.html 파일  소스 중\r\n\r\n<img src\\=\"../images/logo.gif\" alt=\"혜정스\">\r\n\r\n똑같은 index.html 파일이었는데, 기준파일이 저장된 위치에 따라 외부자원을 연결시킬 때 지정경로가 달라지는 것을 볼 수 있었습니다.\r\n\r\n이것을상대경로라고 합니다.\r\n\r\n​\r\n\r\n요약해 보자면\r\n\r\n**(1)****경로지정의 종류** \r\n\r\n      -상대경로 : 현재 문서를 기준으로 하여 연결되는 경로가 상대적으로 변할 수 있는 것\r\n\r\n      -절대경로 : 현재 문서와 상관없이 변하지 않는 경로\r\n\r\n**(2) 상대경로 지정시 유의점**\r\n\r\n     - 현재 문서를 기준으로 경로가 지정됨\r\n\r\n     -**현재 문서와 동일 위치에 있는 자원을 연결시킬 때**:파일명과 확장자 정보를 기재함\r\n\r\n         ex) `<a href=\"info.html\"> , <img src=\"logo.gif\">`\r\n\r\n     -**현재 문서를 기준으로 하위폴더 안에 있을 때**: 폴더명 + 슬래쉬 (/) +파일명과 확장자 를 기재함\r\n\r\n         ex) `<a href=\"pages/info.html\"> , <link rel=\"stylesheet\" href=\"css/style.css\">,<img src=\"images/main/logo.gif\">`\r\n\r\n      -**현재 문서를 기준으로 상위 폴더에 있을 때**:  상위 폴더 한 개를 벗어날 때 마다 ../ 를 사용함\r\n\r\n         ex) `<a href=\"../pages/info.html\"> , <link rel=\"stylesheet\" href=\"../css/style.css\">, <img src=\"../../logo.gif\">`',1,3,0,98,0),
(4,'2020-12-20 11:12:25','2020-12-31 01:19:12','스크롤 화살표, 회전 배너효과','전체적으로 메인페이지를 만들 때는 내비게이션 바를 만들 때보다 더 쉬웠던 것 같다. 적용하기에 어려운 부분은 애니메이션처럼 움직이는 부분이었고 나머지는 할만했다. ✌?\r\n\r\n# Background Image ?\r\n\r\n배경 이미지에 적용하고 싶었던 효과는 크게 두 가지였다.\r\n\r\n☝?, 스크롤을 해도 고정되어 있을 것.  \r\n✌?, 화면에 표시되는 폰트보다 뒤에 있는 느낌으로 조금 어두울 것.\r\n\r\n![](https://media.vlpt.us/images/seob/post/451d1804-a681-4555-a09f-217a459e19c6/main.gif)\r\n\r\n# 회전하는 배너 효과 ?\r\n\r\n![](https://media.vlpt.us/images/seob/post/abdc213c-a93d-4647-8bc1-22905d3c96a7/banner2.gif)\r\n\r\n Html\r\n \r\n ```html\r\n <div class=\"describeMyself\">\r\n   <ul class=\"descriptionList\">\r\n     <li>n Ambitious</li>\r\n     <li>Promising</li>\r\n     <li>Creative</li>\r\n     <li>n Ambitious</li>\r\n   </ul>\r\n </div>\r\n ```\r\n \r\n -   먼저 넣고자 하는 문구를 리스트로 만들어주었다.\r\n -   첫 번째와 마지막 리스트가 같은 이유는 애니메이션의 연속성을 위해 넣어야 한다.\r\n CSS\r\n \r\n ```css\r\n .describeMyself {\r\n   margin: 14px 3px;\r\n   display: inline-block;\r\n   vertical-align: top;\r\n   height: 1.5em;\r\n   overflow: hidden;\r\n   color:white;\r\n   z-index: 2;\r\n }\r\n ```\r\n \r\n -   `height`로 리스트 중 한 가지만 보이도록 범위를 지정\r\n -   `overflow: hidden;`를 이용해 범위를 벗어난 부분은 안 보이도록 해준다.\r\n -   `z-index` 배경 이미지를 덮어주는 부분과 구분해주기 위해서 추가했다.\r\n \r\n ```css\r\n @keyframes rolling {\r\n   0% {\r\n     margin-top: : 0;\r\n   }\r\n   33%{\r\n       margin-top: -1.5em;\r\n   }\r\n   66%{\r\n       margin-top:-3em;\r\n   }\r\n   100%{\r\n       margin-top:-4.5em;\r\n   }\r\n }\r\n ```\r\n \r\n -   구글링한 결과 `keyframs`를 사용하여 애니메이션 효과를 줄 수 있었다.\r\n -   리스트 아이템이 4개이므로 4단계로 나누어서 %를 지정해주고, 해당 %마다 `margin-top`으로 움직일 방향과 움직일 범위를 지정해주었다.\r\n \r\n ```css\r\n .descriptionList {\r\n   padding-left: 0;\r\n   margin:0;\r\n   animation-name: rolling;\r\n   animation-duration: 6s;\r\n   animation-iteration-count: infinite;\r\n }\r\n .descriptionList li {\r\n   list-style: none;\r\n   line-height: 1.5em;\r\n   display: flex;\r\n   justify-content: center;\r\n   flex-wrap: nowrap;\r\n }\r\n ```\r\n \r\n -   `animation-name`으로 `rolling`을 불러주고,\r\n -   `animation-duration`으로 한 싸이클에 6초가 걸리도록 설정했다.\r\n -   `animation-iteratin-count: infinite;` 무한히 반복하도록 설정한 부분.\r\n\r\n이 부분에서 아쉬웠던 점은 리스트 아이템의 텍스트 길이에 따라 유동적으로 앞과 뒤의 텍스트와 거리 조절을 해주고 싶었는데 그건 나중에 기회가 있으면 하기로 하고 넘겼다..?\r\n\r\n# 움직이는 화살표 ⏬\r\n\r\n![](https://media.vlpt.us/images/seob/post/18175148-8339-4f40-a37f-b55f7f1103a8/arrows.gif)\r\n\r\n이걸 만들면서 신기했던 부분은 아이콘을 따로 불러올 필요 없이 CSS만으로 간단한 도형 정도는 만들 수 있다는 점이었다.\r\n\r\n애니메이션은 회전하는 배너 효과와 마찬가지로 `keyframes`를 사용하였다.\r\n\r\n Html\r\n \r\n ```html\r\n <div class=\"arrow-down\">\r\n   <a href=\"#about\">\r\n     <span></span>\r\n     <span></span>\r\n     <span></span>\r\n   </a>\r\n </div>\r\n ```\r\n \r\n -   넣을 화살표의 수 만큼 `span`을 추가해준다.\r\n -   이 화살표를 클릭하면 바로 밑의 페이지로 이동시킬 것이므로 `a`태그 속에 `span`을 넣어준다.\r\n\r\n CSS\r\n \r\n ```css\r\n .arrow-down span{\r\n   display: block;\r\n   width: 1.5em;\r\n   height: 1.5em;\r\n   border-bottom: 1px solid #fff;\r\n   border-right: 1px solid #fff;\r\n   transform: rotate(45deg);\r\n   margin: -10px;\r\n   animation: animate-arrows 2s infinite;\r\n }\r\n ```\r\n \r\n -   투명한 정사각형 상자를 만들어서 테두리를 아래와 오른쪽에만 만들어준다.\r\n -   `transfomr: rotate(45deg);` 시계방향으로 45도 틀어주면 아래를 향하는 화살표 모양이 된다!\r\n \r\n ```css\r\n @keyframes animate-arrows{\r\n   0%{\r\n     opacity: 0;\r\n     transform: rotate(45deg) translate(-1.5em, -1.5em);\r\n   }\r\n   50%{\r\n     opacity: 1;\r\n   }\r\n   100%{\r\n     opacity: 0;\r\n     transform: rotate(45deg) translate(1.5em, 1.5em);\r\n   }\r\n }\r\n ```\r\n \r\n -   LED의 숨쉬기모드(?) 처럼 화살표가 번쩍번쩍하는 느낌을 주기 위해 투명도를 0과 1 사이에서 왔다 갔다 하게 설정\r\n -   `translate`를 이용하여 화살표가 움직일 거리를 정해준다.\r\n \r\n ```css\r\n .arrow-down span:nth-child(1){\r\n   animation-delay: -0.2s;\r\n }\r\n .arrow-down span:nth-child(2){\r\n   animation-delay: -0.4s;\r\n }\r\n .arrow-down span:nth-child(3){\r\n   animation-delay: -0.6s;\r\n }\r\n ```\r\n \r\n -   화살표가 한 번에 움직이지 않고 따로 움직이도록 딜레이를 따로 설정해주었다.\r\n\r\n간단한 코드 몇 줄로 이런 효과를 줄 수 있어서 노력 대비 결과가 너무나도 만족스러웠다.\r\n\r\n아무것도 참고하지 않고 혼자 만들 수는 없었을 것 같은데 다시 또 한 번 인터넷의 위대함을 느낀다..ㅋㅋ\r\n\r\n갓글,,갓튜브 고맙습니다,,??‍♂️',1,6,1,124,0),
(5,'2020-12-20 11:23:16','2020-12-31 01:19:12','CSS: CSS 스크롤 화살표 표기','\r\n\r\n## 1\\. 화살표\r\n\r\n![화살표](http://rwdb.kr/images/2019/190605_01.png)\r\n\r\n간단한 화살표 만의 패턴에서 흔히 볼 수있는 `border`지정한 요소를 `transform: rotate(-45deg);`이지 회전시킨 것입니다 CSS를 다음과 같이 설명합니다.\r\n\r\n`CSS`\r\n\r\n```css\r\na {\r\n  padding-top: 60px;\r\n}\r\na span {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 50%;\r\n  width: 24px;\r\n  height: 24px;\r\n  margin-left: -12px;\r\n  border-left: 1px solid #fff;\r\n  border-bottom: 1px solid #fff;\r\n  -webkit-transform: rotate(-45deg);\r\n  transform: rotate(-45deg);\r\n  box-sizing: border-box;\r\n}\r\n\r\n```\r\n\r\n## 2\\. 화살표 × 서클\r\n\r\n![화살표 × 서클](http://rwdb.kr/images/2019/190605_02.png)\r\n\r\n이곳은 방금 화살표 서클을 추가 한 것으로, CSS를 다음과 같이 설명합니다.\r\n\r\n`CSS`\r\n\r\n```css\r\na {\r\n  padding-top: 60px;\r\n}\r\na span {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 50%;\r\n  width: 46px;\r\n  height: 46px;\r\n  margin-left: -23px;\r\n  border: 1px solid #fff;\r\n  border-radius: 100%;\r\n  box-sizing: border-box;\r\n}\r\na span::after {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  content: \'\';\r\n  width: 16px;\r\n  height: 16px;\r\n  margin: -12px 0 0 -8px;\r\n  border-left: 1px solid #fff;\r\n  border-bottom: 1px solid #fff;\r\n  -webkit-transform: rotate(-45deg);\r\n  transform: rotate(-45deg);\r\n  box-sizing: border-box;\r\n}\r\n\r\n```\r\n\r\n## 3\\. 화살표 × 원 × 파문\r\n\r\n![화살표 × 원 × 파문](http://rwdb.kr/images/2019/190605_03.gif)\r\n\r\n방금 전의 “화살표 × 서클”조금 움직임을 붙인 것으로, 파문이 확산 효과를 붙인 것입니다.  \r\n구현은 CSS를 다음과 같이 설명합니다.\r\n\r\n`CSS`\r\n\r\n```css\r\na {\r\n  padding-top: 60px;\r\n}\r\na span {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 50%;\r\n  width: 46px;\r\n  height: 46px;\r\n  margin-left: -23px;\r\n  border: 1px solid #fff;\r\n  border-radius: 100%;\r\n  box-sizing: border-box;\r\n}\r\na span::after {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  content: \'\';\r\n  width: 16px;\r\n  height: 16px;\r\n  margin: -12px 0 0 -8px;\r\n  border-left: 1px solid #fff;\r\n  border-bottom: 1px solid #fff;\r\n  -webkit-transform: rotate(-45deg);\r\n  transform: rotate(-45deg);\r\n  box-sizing: border-box;\r\n}\r\na span::before {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: -1;\r\n  content: \'\';\r\n  width: 44px;\r\n  height: 44px;\r\n  box-shadow: 0 0 0 0 rgba(255,255,255,.1);\r\n  border-radius: 100%;\r\n  opacity: 0;\r\n  -webkit-animation: sdb 3s infinite;\r\n  animation: sdb 3s infinite;\r\n  box-sizing: border-box;\r\n}\r\n@-webkit-keyframes sdb {\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  30% {\r\n    opacity: 1;\r\n  }\r\n  60% {\r\n    box-shadow: 0 0 0 60px rgba(255,255,255,.1);\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n@keyframes sdb {\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  30% {\r\n    opacity: 1;\r\n  }\r\n  60% {\r\n    box-shadow: 0 0 0 60px rgba(255,255,255,.1);\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n```\r\n\r\n## 4\\. 화살표 × 애니메이션 # 1\r\n\r\n![화살표 × 애니메이션 # 1](http://rwdb.kr/images/2019/190605_04.gif)\r\n\r\n화살표에 일정 간격으로 위치가 아래에 조금 어긋나는 애니메이션을 더한 CSS를 다음과 같이 설명합니다.\r\n\r\n`CSS`\r\n\r\n```css\r\na {\r\n  padding-top: 60px;\r\n}\r\na span {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 50%;\r\n  width: 24px;\r\n  height: 24px;\r\n  margin-left: -12px;\r\n  border-left: 1px solid #fff;\r\n  border-bottom: 1px solid #fff;\r\n  -webkit-transform: rotate(-45deg);\r\n  transform: rotate(-45deg);\r\n  -webkit-animation: sdb 2s infinite;\r\n  animation: sdb 2s infinite;\r\n  box-sizing: border-box;\r\n}\r\n@-webkit-keyframes sdb {\r\n  0% {\r\n    -webkit-transform: rotate(-45deg) translate(0, 0);\r\n  }\r\n  20% {\r\n    -webkit-transform: rotate(-45deg) translate(-10px, 10px);\r\n  }\r\n  40% {\r\n    -webkit-transform: rotate(-45deg) translate(0, 0);\r\n  }\r\n}\r\n@keyframes sdb {\r\n  0% {\r\n    transform: rotate(-45deg) translate(0, 0);\r\n  }\r\n  20% {\r\n    transform: rotate(-45deg) translate(-10px, 10px);\r\n  }\r\n  40% {\r\n    transform: rotate(-45deg) translate(0, 0);\r\n  }\r\n}\r\n\r\n```\r\n\r\n## 5\\. 화살표 × 애니메이션 # 2\r\n\r\n![화살표 × 애니메이션 # 2](http://rwdb.kr/images/2019/190605_05.gif)\r\n\r\n이곳은 위에서 아래로 화살표가 이동하면서 자연스럽게 사라질 것으로, CSS를 다음과 같이 설명합니다.\r\n\r\n`CSS`\r\n\r\n```css\r\na {\r\n  padding-top: 70px;\r\n}\r\na span {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 50%;\r\n  width: 24px;\r\n  height: 24px;\r\n  margin-left: -12px;\r\n  border-left: 1px solid #fff;\r\n  border-bottom: 1px solid #fff;\r\n  -webkit-transform: rotate(-45deg);\r\n  transform: rotate(-45deg);\r\n  -webkit-animation: sdb 1.5s infinite;\r\n  animation: sdb 1.5s infinite;\r\n  box-sizing: border-box;\r\n}\r\n@-webkit-keyframes sdb {\r\n  0% {\r\n    -webkit-transform: rotate(-45deg) translate(0, 0);\r\n    opacity: 0;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    -webkit-transform: rotate(-45deg) translate(-20px, 20px);\r\n    opacity: 0;\r\n  }\r\n}\r\n@keyframes sdb {\r\n  0% {\r\n    transform: rotate(-45deg) translate(0, 0);\r\n    opacity: 0;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    transform: rotate(-45deg) translate(-20px, 20px);\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n```css\r\n\r\n## 6\\. 화살표 × 애니메이션 # 3\r\n\r\n![화살표 × 애니메이션 # 3](http://rwdb.kr/images/2019/190605_06.gif)\r\n\r\n이쪽도 앞서와 마찬가지로 화살표가 위에서 아래로 이동하면서 사라져가는 것입니다 만, 또한 빙글 빙글 회전하는 움직임을 붙인 것입니다.  \r\n구현은 CSS를 다음과 같이 설명합니다.\r\n\r\n`CSS`\r\n\r\n```css\r\na {\r\n  padding-top: 70px;\r\n}\r\na span {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 50%;\r\n  width: 24px;\r\n  height: 24px;\r\n  margin-left: -12px;\r\n  border-left: 1px solid #fff;\r\n  border-bottom: 1px solid #fff;\r\n  -webkit-transform: rotateZ(-45deg);\r\n  transform: rotateZ(-45deg);\r\n  -webkit-animation: sdb 1.5s infinite;\r\n  animation: sdb 1.5s infinite;\r\n  box-sizing: border-box;\r\n}\r\n@-webkit-keyframes sdb {\r\n  0% {\r\n    -webkit-transform: rotateY(0) rotateZ(-45deg) translate(0, 0);\r\n    opacity: 0;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    -webkit-transform: rotateY(720deg) rotateZ(-45deg) translate(-20px, 20px);\r\n    opacity: 0;\r\n  }\r\n}\r\n@keyframes sdb {\r\n  0% {\r\n    transform: rotateY(0) rotateZ(-45deg) translate(0, 0);\r\n    opacity: 0;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    transform: rotateY(720deg) rotateZ(-45deg) translate(-20px, 20px);\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n```\r\n\r\n## 7\\. 화살표 × 애니메이션 # 4\r\n\r\n![화살표 × 애니메이션 # 4](http://rwdb.kr/images/2019/190605_07.gif)\r\n\r\n이곳은 여러 화살표를 사용하여 패턴의 것으로하고있는 것은 단지 각각의 위치를 이동 배치 한 화살표 표시 · 비 표시하고있다뿐입니다 만, `animation-delay`에서 시간을 늦추는 것으로 이러한 모양이됩니다.  \r\n이 구현에 관한 HTML은 지금까지의 것과는 조금 달리 HTML과 CSS 각각을 다음과 같이 설명합니다.\r\n\r\n`HTML`\r\n\r\n```html\r\n<a href=\"#\"><span></span><span></span><span></span>Scroll</a>\r\n\r\n```\r\n\r\n`CSS`\r\n\r\n```css\r\na {\r\n  padding-top: 80px;\r\n}\r\na span {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 50%;\r\n  width: 24px;\r\n  height: 24px;\r\n  margin-left: -12px;\r\n  border-left: 1px solid #fff;\r\n  border-bottom: 1px solid #fff;\r\n  -webkit-transform: rotate(-45deg);\r\n  transform: rotate(-45deg);\r\n  -webkit-animation: sdb 2s infinite;\r\n  animation: sdb 2s infinite;\r\n  opacity: 0;\r\n  box-sizing: border-box;\r\n}\r\na span:nth-of-type(1) {\r\n  -webkit-animation-delay: 0s;\r\n  animation-delay: 0s;\r\n}\r\na span:nth-of-type(2) {\r\n  top: 16px;\r\n  -webkit-animation-delay: .15s;\r\n  animation-delay: .15s;\r\n}\r\na span:nth-of-type(3) {\r\n  top: 32px;\r\n  -webkit-animation-delay: .3s;\r\n  animation-delay: .3s;\r\n}\r\n@-webkit-keyframes sdb {\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n@keyframes sdb {\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n```\r\n\r\n## 8\\. 마우스\r\n\r\n![마우스](http://rwdb.kr/images/2019/190605_08.png)\r\n\r\n화살표 이외의 것이라고 스크롤 버튼으로 배치되어있는 것을 아래 보이는 경우가 많다 마우스를 구현하고 본 것으로 CSS를 다음과 같이 설명합니다.\r\n\r\n`CSS`\r\n\r\n```css\r\na {\r\n  padding-top: 60px;\r\n}\r\na span {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 50%;\r\n  width: 30px;\r\n  height: 50px;\r\n  margin-left: -15px;\r\n  border: 2px solid #fff;\r\n  border-radius: 50px;\r\n  box-sizing: border-box;\r\n}\r\na span::before {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 50%;\r\n  content: \'\';\r\n  width: 6px;\r\n  height: 6px;\r\n  margin-left: -3px;\r\n  background-color: #fff;\r\n  border-radius: 100%;\r\n  box-sizing: border-box;\r\n}\r\n\r\n```\r\n\r\n## 9\\. 마우스 × 화살표\r\n\r\n![마우스 × 화살표](http://rwdb.kr/images/2019/190605_09.png)\r\n\r\n이곳은 방금 마우스 아래에 화살표를 추가 한 것으로, 구현은 CSS를 다음과 같이 설명합니다.\r\n\r\n`CSS`\r\n\r\n```css\r\na {\r\n  padding-top: 80px;\r\n}\r\na span {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 50%;\r\n  width: 30px;\r\n  height: 50px;\r\n  margin-left: -15px;\r\n  border: 2px solid #fff;\r\n  border-radius: 50px;\r\n  box-sizing: border-box;\r\n}\r\na span::before {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 50%;\r\n  content: \'\';\r\n  width: 6px;\r\n  height: 6px;\r\n  margin-left: -3px;\r\n  background-color: #fff;\r\n  border-radius: 100%;\r\n  box-sizing: border-box;\r\n}\r\na span::after {\r\n  position: absolute;\r\n  bottom: -18px;\r\n  left: 50%;\r\n  width: 18px;\r\n  height: 18px;\r\n  content: \'\';\r\n  margin-left: -9px;\r\n  border-left: 1px solid #fff;\r\n  border-bottom: 1px solid #fff;\r\n  -webkit-transform: rotate(-45deg);\r\n  transform: rotate(-45deg);\r\n  box-sizing: border-box;\r\n}\r\n\r\n```\r\n\r\n## 10\\. 마우스 × 애니메이션\r\n\r\n![마우스 × 애니메이션](http://rwdb.kr/images/2019/190605_10.gif)\r\n\r\n이곳은 마우스 스크롤을 격려하는 애니메이션을 더해 보면 한 것으로, 구현은 CSS를 다음과 같이 설명합니다.\r\n\r\n`CSS`\r\n\r\n```css\r\na {\r\n  padding-top: 60px;\r\n}\r\na span {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 50%;\r\n  width: 30px;\r\n  height: 50px;\r\n  margin-left: -15px;\r\n  border: 2px solid #fff;\r\n  border-radius: 50px;\r\n  box-sizing: border-box;\r\n}\r\na span::before {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 50%;\r\n  content: \'\';\r\n  width: 6px;\r\n  height: 6px;\r\n  margin-left: -3px;\r\n  background-color: #fff;\r\n  border-radius: 100%;\r\n  -webkit-animation: sdb 2s infinite;\r\n  animation: sdb 2s infinite;\r\n  box-sizing: border-box;\r\n}\r\n@-webkit-keyframes sdb {\r\n  0% {\r\n    -webkit-transform: translate(0, 0);\r\n    opacity: 0;\r\n  }\r\n  40% {\r\n    opacity: 1;\r\n  }\r\n  80% {\r\n    -webkit-transform: translate(0, 20px);\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n@keyframes sdb {\r\n  0% {\r\n    transform: translate(0, 0);\r\n    opacity: 0;\r\n  }\r\n  40% {\r\n    opacity: 1;\r\n  }\r\n  80% {\r\n    transform: translate(0, 20px);\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n```\r\n',1,6,1,356,0),
(7,'2020-12-20 15:35:29','2020-12-31 01:19:12','java: 재귀함수 정리','래 범위의 문제에서 더 작은 범위의 하위 문제를 먼저 해결함으로써 원래 문제를 해결해 나가는 방식입니다. 일반 반복문을 통해 구현 가능한 기능은 재귀 함수를 통해 구현이 가능하며 반대로 재귀 함수로 구현 한 기능을 반복문으로 구현이 가능합니다.\r\n\r\n재귀 함수는 함수 내에서 자기 자신을 계속 호출하는 방식이기 때문에 함수 안에 반드시 종료 구간이 되는 Base Case를 생각하며 코드를 구현해야 합니다. 아래 샘플 예제를 한 번 보겠습니다.\r\n\r\njava\r\n```java\r\npublic class Recursion_Test\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Function();\r\n    }\r\n \r\n    public static void Function()\r\n    {\r\n        System.out.println(\"반갑습니다\");\r\n \r\n        Function();\r\n    }\r\n}\r\n\r\n```\r\n\r\n▼ Function이라는 Method를 정의하였습니다. 해당 함수의 기능은 \"반갑습니다\"를 호출하고 다시 자기 자신을 호출하고 있습니다. 해당 소스에서 문제는 자기 자신을 호출만 하고있지 함수 영역이 종료되는 구간이 없기 때문에 \"반갑습니다\"가 계속 출력되는 무한 루프에 빠지게 됩니다.\r\n\r\njava\r\n```java\r\npublic class Recursion_Test3\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Function(5);\r\n    }\r\n \r\n    public static void Function(int num)\r\n    {\r\n        if(num == 0)\r\n        {\r\n            return;\r\n        }\r\n        else\r\n        {\r\n            System.out.println(\"반갑습니다\");\r\n             Function(num - 1);\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n▼ 함수를 살짝 수정해보겠습니다. Function Method는 매개변수 num을 받고 if 구문에 의해 분기가 되고 있습니다. 매개변수 값이 0일 경우 return을 하고0이 아닐 경우 \"반갑습니다\"를 출력하고 num - 1에 해당하는 값을 매개변수로 전달하고 있습니다. 여기서 num 값이 0일 경우 return을 하게 되는 구문이 이 재귀 함수의  Base Case 구간이 됩니다. 해당 재귀 함수의 호출을 그림으로 보면 아래와 같습니다.\r\n\r\n![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F99FDDF4C5CA4311809DFD6)\r\n\r\n▼ 매개변수 num의 값이 0 일 때 함수가 return이 됩니다. 결과적으로 출력물은 총 5번이 출력이 됩니다.\r\n\r\n**2\\. 1 부터 n까지 합 구하기.**\r\n\r\n위에서 배운 재귀 알고리즘을 적용하여 1부터 n까지 합을 구하는 함수를 구현해보도록 하겠습니다. 아래 소스를 참조 바랍니다. \r\n\r\njava\r\n```java\r\npublic class Recursion_Test2\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        System.out.println(\"1부터 5까지의 합은 : \" + Function(5));\r\n    }\r\n \r\n    public static int Function(int num)\r\n    {\r\n        if(num == 1)\r\n        {\r\n            return 1;\r\n        }\r\n        else\r\n        {\r\n            return num + Function(num -1);\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n▼ num이 1이면 그냥 1을 return을 하고 함수가 종료됩니다. 1이 아닐 경우 현재 num 값에 Funtion(num-1) 결과로 리턴되는 값을 더하여 리턴을 하게 됩니다. 풀이를 해보자면 5 + 1~4까지의 합이 되는 셈입니다. 매개변수 값이 4가 넘어가게 되는 경우에는 4 + 1~3까지의 합이 되는 거죠. \r\n\r\n![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=http%3A%2F%2Fcfile5.uf.tistory.com%2Fimage%2F99967F3F5CA4343F0268B0)',1,1,0,894,0),
(8,'2020-12-20 15:36:16','2020-12-31 01:19:11','CSS: float, clear','레이아웃 디자인 - Floating\r\n\r\n뷰포트(Viewport)와 관련하여 레이아웃(배치)을 다루기 위한float,clear속성에 대해 알아보겠습니다.\r\n\r\n\r\n\r\n플로팅 레이아웃(float)\r\n\r\n대표적인 레이아웃 테크닉인**플로팅(Floating)**을 알아보고, 이 속성과 관련된clear속성에 대해 알아봅니다.\r\n\r\n일반적인 레이아웃 흐름(Normal Layout Flow)\r\n\r\nCSS 가 미반영된 화면에서 위에서부터 아래 방향으로 나열되는 것이 일반적인 레이아웃 흐름이라고 할 수 있습니다.  \r\n위 HTML 코드 마크업상<h1>요소 다음에<p>요소의 순서대로 제목이 나오고 단락이 나오는 형태가  \r\nHTML 문서를 해석한 웹브라우저가 화면에 그리는 방식입니다.\r\n\r\n플로팅(Floating) 레이아웃\r\n\r\nCSSfloat속성은 특히 국내 실무 내에서 레이아웃 설계하는 과정에서 많이 사용하는 속성입니다.\r\n\r\n복잡한 형태의 레이아웃을 구성하는데 필요한 핵심 속성으로특정 요소를 떠있게, 흐르도록, 부유하게 하도록 하는 속성입니다\r\n\r\n다시 말해,float 속성을 사용해 박스를 왼쪽(left) 또는 오른쪽(right)으로 \"부유\"시키는 레이아웃 기법입니다.\r\n\r\n여기서 \'부유하다\' 라는 의미는 요소가기본적인 문서 배치의 흐름에서 벗어나요소의 모서리가 페이지의 왼쪽이나 오른쪽으로 이동하는 것을 말합니다.\r\n\r\n이 플로팅 모델을 이용하면 문서의 흐름과 관계없이 화면 배치를 유연하게 할 수 있습니다.\r\n\r\nCSS\r\n```css\r\n.box { float: value; }\r\n```\r\n다음은 float 의 속성값(value)입니다.\r\n\r\n-   left: 요소를 왼쪽 방향으로 부유하게 설정\r\n-   right: 요소를 오른쪽 방향으로 부유하게 설정\r\n-   none: 기본값(default), 요소를 띄우지 않는다.\r\n\r\n플롯 속성을 사용할 요소는 position 속성의 absolute 값과 양립할 수 없습니다.\r\n\r\n이미지에 텍스트를 둘러싸게 만들려는 목표로 나온 기법이floating이라는 기법입니다.\r\n\r\n플로팅 모델 살펴보기\r\n\r\n![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FECT14%2FbtqO6gfQw6X%2FmnokLPFot64fdJ4rHNSN11%2Fimg.png)\r\n\r\n![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F8Z13G%2FbtqO13ad6Ms%2FWwBmp4KWAyM0J7d6nQ2AXk%2Fimg.png)\r\n\r\n![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FxO4iC%2FbtqO72Ia5Hw%2FIVb6a2D43khWtS6OckWrX1%2Fimg.png)\r\n\r\n![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbMoHKm%2FbtqO6hsmfGU%2FJUoi7KAKGnLUTKhc0pyoMk%2Fimg.png)\r\n\r\n중요한 사실은 플로팅된 요소는 그 요소의 종류에 상관없이 블럭 박스가 된다는 점입니다.\r\n\r\n인라인 요소인 링크(anchor)를 플로팅시키는 경우에 이 요소 특성은 블럭 박스로 변경되고 마치 div 인 것처럼 동작하게 됩니다.\r\n\r\n대신 자신의 영역만을 가지고 있는인라인 블럭 박스처럼 렌더링되는 것이 특이한 점입니다.\r\n\r\n다시 말해, 플로팅된 요소는display: inline-block;을 선언한 것과 동일해지기 때문에 따로 선언해줄 필요는 없습니다.\r\n\r\n  \r\n  \r\n\r\nclear - 플로팅 해제 기법\r\n\r\n플로팅한 요소는 문서의 흐름상에서 벗어난 상태이기 때문에 레이아웃을 무너뜨리게 되는 현상을 보게 될 것입니다.  \r\n이는 플롯을 사용하면 발생되는 현상이며 이러한 문제를 해결하기 위해서는float 을 해제해 주어야 합니다.\r\n\r\n여기서**\"float 을 해제한다\"**는 의미는 float 이 적용된 요소를 해제하는 것이 아니라  \r\nclear 속성을 적용해 float 의 영향을 받지 않도록 한다는 의미입니다.\r\n\r\n플롯을 해제하는 방법 중에 전 세계적으로 통용되는 이름(관용적인 기법의 이름)으로clearfix라는 방법이 있습니다.\r\n\r\n물론clear속성을 적용하기 보다 다른 방법으로도 플롯을 해제할 수는 있으나float 을 사용해 레이아웃을 잡다보면 clear 가 필요해지기 때문에 가급적 플롯된 요소의 부모 요소에 clearfix 방법을 적용하는 것을 권장하고 있습니다.\r\n\r\n다시 말해,float이 적용된 자식 요소를 부모 요소가 감싸 안지 못하는 현상을 해결하기 위해서는**대략적으로 6가지 방법**이 있는데  \r\n그 중 대표적으로 많이 사용 되는 방법이clearfix입니다.\r\n\r\n즉,clearfix 방법은 무조건이라기 보다 필요에 의해서 사용하는 것입니다.\r\n\r\nCSS\r\n```css\r\n.clearfix { clear: value; }\r\n```\r\nclear속성값은 다음과 같습니다.\r\n\r\n-   left: 왼쪽에 floating 된 요소를 지정 해제\r\n-   right: 오른쪽에 floating 된 요소를 지정 해제\r\n-   both: 왼쪽 오른쪽 모두 floating 된 요소를 지정 해제\r\n-   none: 기본값(default), floating 을 해제하지 않음\r\n\r\n플롯을 해제하기 전과 해제 후 살펴보기\r\n\r\n![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FoidVc%2FbtqO7ixGAKy%2F4TQFBH1PKsVGhpNLNEn9g1%2Fimg.png)\r\n\r\n![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb7Acuu%2FbtqOYu7v9aW%2FR357Ml1D4IKF1CHVpNkFF1%2Fimg.png)\r\n\r\n첫 번째 float 해제 방법\r\n\r\nCSS\r\n```css\r\n.parent { float: left; }\r\n```\r\n\r\n플롯된 요소가 자식 요소일 경우에 부모요소는 자식 요소(문서 흐름에서 벗어남)를 감싸지 못하는 특징으로 인해 레이아웃이 무너진 형태처럼 보이게 됩니다. 이는 플롯을 사용하게 되면 발생되는 현상이며 이 문제를 해결하기 위해서는 플롯의 영향을 받지 않도록 해야합니다.\r\n\r\n다시 말해, 부모요소는 플롯된 자식요소를 포함하는 경우에 부모요소는 높이를 인지하지 못하게 됩니다.\r\n\r\n이 문제를 해결하는 방법 중에 하나가부모(컨테이닝 요소)에게도 float 속성을 반영하는 방법입니다.\r\n\r\n이렇게 하면 부모 요소는 자식 요소의 높이를 인지하게 되지만 부모 요소도 float 된 요소가 되어 인라인 블럭의 특징을 가지고 되기 때문에 비주얼 디자인 레이아웃에 따라 상황에 맞도록 사용해야 합니다.\r\n\r\n두 번째 float 해제 방법\r\n\r\n이 방법 역시 부모 요소에 적용하는데display: inline-block;속성을 사용하는 방법이 있습니다.\r\n\r\n부모 요소는 자식 요소의 높이를 인지하게 되지만 되지만 부모 요소에 정의된 인라인블럭 속성 특성 때문에 본인 영역만큼만 너비를 가지게 됩니다.\r\n\r\nCSS\r\n```css\r\n.parent { display: inline-block; }\r\n```\r\n\r\n세 번째 float 해제 방법\r\n\r\n세 번째 방법으로 플롯을 해제할 수 있는 속성은overflow:hidden;방식입니다.\r\n\r\n이 속성 역시도 부모 요소에 적용해야 하며, 이 속성의 특징은 자식 요소가 부모 요소 박스보다 클 경우에 자식 요소 박스의 콘텐츠를 숨기고 보이지 않게 해주는 속성입니다.\r\n\r\noverflow: auto;를 적용해도 되지만 자식 요소 박스의 너비가 부모 요소 박스의 너비보다 클 경우에 스크롤이 생기기 때문에 권장되지 않습니다.\r\n\r\noverflow 특징대로 넘치는 것을 숨겨주는 속성인데, 여기선 다른 의미도 포함하고 있습니다.\r\n\r\n넘치는 콘텐츠를 숨긴다는 의미는 부모 요소 박스가 그 자식 요소 콘텐츠를 숨긴다는 것입니다.\r\n\r\n그런데 부모 요소가 플롯된 자식 요소로 인해 높이를 인지하지 못하고 있는 상황에서overflow: hidden;속성을 적용하게 되면 부모 요소(컨테이닝 박스)는 넘치는 요소를 숨김 처리를 하려고 하기 때문에 자식 요소의 높이를 인지하기 위해 자동으로 높이값을 계산하게 됩니다.\r\n\r\nCSS\r\n```css\r\n.parent { overflow: hidden; }\r\n```\r\n참고로overflow:hidden;속성을 적용하는 방법은 권장되지는 않습니다.\r\n\r\n예를 들어, 동적(스크립팅)으로 자식, 자손 요소들 중에서 부모 요소 박스를 벗어나서 보여주어야 될 경우에 hidden 값으로 인해 보여주고자 하는 콘텐츠를 보여줄 수 없게 되기 때문에 잘 판단하여 선택적으로 사용해야 합니다.\r\n\r\n네 번째 float 해제 방법\r\n\r\n이 방식은 과거(Legacy)에 널리 사용되던 방식(현재는 지양)으로 플롯된 요소의 마자막 요소(형제 레벨)로빈 엘리먼트 작성하여 clear 속성을 적용하는 방법이 있습니다.\r\n\r\n:HTML\r\n```html\r\n<div class\\=\"box-group\"\\> <div class\\=\"box is-blue\"\\></div\\> <div class\\=\"box is-yellow\"\\></div\\> <div class\\=\"box is-green\"\\></div\\> <div class\\=\"clear\"\\></div\\> </div\\>\r\n```\r\n\r\n이 방법 또한불필요한 의미없는 빈 요소를 이용하는 것이기 때문에가장 권장되지 않는 방법입니다.\r\n\r\n다섯 번째 float 해제 방법\r\n\r\n지금까지 소개한 방식 중 가장 널리 쓰이고 있는 테크닉으로 CSS의가상(슈도클래스, 의사클래스) 클래스를 이용하는 방법이 있습니다.\r\n\r\n앞서 소개한 방법은 불필요한 의미없는 요소를 작성해야 했지만 이 방법은 CSS 를 통해 빈 가상 요소를 생성하여 float 을 해제하는 방법입니다.\r\n\r\nCSS 의 가상 요소 중에:after를 이용합니다.\r\n\r\nCSS\r\n```css\r\n.parent:after { content: \"\"; display:block; clear:both; }\r\n```\r\n\r\n이 방식은 구형 브라우저인 IE7 에서 가상 요소를 지원하지 않기 때문에 다음과 같은 핵을 사용해야 합니다.\r\n\r\n가상 요소 대신에 부모 요소에 CSS 핵인\\*zoom:1;이라는 속성을 적용하는데 이는 MS사의 인터넷익스플로러 구형 브라우저 중에 \\[IE 5.5 ~ 7\\]은 hasLayout 이라는 속성을 가지게 구현해 놓은 IE 만의 고유한 속성입니다.\r\n\r\n  \r\n  \r\n\r\n여섯 번째 float 해제 방법\r\n\r\n마지막으로 소개해 드리는 방식은micro clearfix라는 이름의 테크닉입니다.\r\n\r\n이 방법은 CSS 연구전문가인 니콜라스 갤러거가 고안한 방법([micro clearfix hack](http://nicolasgallagher.com/micro-clearfix-hack/))으로 처음 HTML5 보일러플레이트란 템플릿 엔진을 통해 소개되었습니다.\r\n\r\n2011년에 고안되었지만 이후 부트스트랩(Ver.1~3)에서 이 방법을 사용하면서 널리 알려지게 되었습니다.\r\n\r\nCSS\r\n```css\r\n.parent { /\\* For IE 6/7 only \\*/ \\*zoom: 1; } .parent:before, .parent:after { content: \"\"; display: table; } .parent:after { clear:both; }\r\n```\r\n\r\n마치며\r\n\r\n지금까지 뷰포트와 관련하여 박스를 배치시키는 방법과 그에 따른 문제를 해결하기 위한 속성을 살펴 보았습니다..  \r\nCSS 레이아웃과 관련된 방법은 position 속성도 있으나 차세대 테크닉인 플렉스박스(flexbox), 그리드 등의 방법이 새롭게 유행하고 있으니 살펴보시기 바랍니다.\r\n\r\n',1,3,0,54,0),
(9,'2020-12-20 15:36:53','2020-12-31 01:19:11','예외처리 try catch',' 1\\. 예외 처리\r\n \r\n 프로그램을 만들다 보면 수많은 에러를 만나기도 하지만 문법적인 오류가 아닌 예외 사항이 발생하기도 한다. 이때, 이에 대한 적절한 처리가 필요한데 간단한 예외의 경우 if 조건문으로 처리할 수 있다.\r\n \r\n ​\r\n \r\n![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FDYReX%2FbtqNwxxnTba%2Fk44Uwu4hspKlzORO7MTZl1%2Fimg.png)\r\n \r\n 하지만 이렇게 되면 정상적인 if 코드와 구분이 어렵다. 이럴 때 사용할 수 있는 게 바로 try catch다.\r\n \r\n ​\r\n \r\n try catch의 형태는 아래와 같다.\r\n \r\n ​\r\n ```java\r\n try {\r\n \r\n 예외가 발생할 구문\r\n \r\n } catch (Exception e) {\r\n \r\n 처리할 구문\r\n \r\n }\r\n ```\r\n ​\r\n \r\n try의 안에는 예외가 발생할만한 부분을 넣어주고 catch의 괄호 안에 해당하는 예외와 같은 예외가 발생하면 try 구문을 더 실행하지 않고 catch로 넘어가 중괄호 안의 구문을 실행한다.\r\n \r\n ​\r\n \r\n 자바 컴파일러는 예외가 발생하는 순간 그 예외를 던지는데, chatch가 그 예외를 잡아 처리해 주는 역할을 하는 것이다.\r\n \r\n ​\r\n \r\n try catch는 try catch finally의 형태로도 쓸 수 있는데, 이 형태는 try catch 내 예외 발생 여부와 상관없이 반드시 실행해야 할 구문이 있을 때 사용한다.\r\n \r\n ​\r\n ```java\r\n try {\r\n \r\n ​\r\n \r\n } catch(Exception e) {\r\n \r\n ​\r\n \r\n } finally {\r\n \r\n 마지막에 출력되는 실행문\r\n \r\n }\r\n ```\r\n ​\r\n \r\n 위의 형태를 사용하면 예외 처리를 위해 catch 구문을 실행하든 하지 않든 반드시 출력된다.\r\n \r\n ​\r\n \r\n 이제 try catch를 이용하여 위의 소스 코드를 변경해보자.\r\n \r\n![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FqCCTH%2FbtqNx9CYRYN%2FHrt7BL7ML7PnSG3JByj6i1%2Fimg.png) \r\n \r\n ​\r\n \r\n 추가로 finally까지 구현해 보자.\r\n \r\n ![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FqCCTH%2FbtqNx9CYRYN%2FHrt7BL7ML7PnSG3JByj6i1%2Fimg.png)\r\n \r\n catch의 내용을 실행하고도 finally의 출력문이 실행되었다.\r\n \r\n ​\r\n \r\n 이번엔 try 부분에 다른 출력 소스들을 추가해 보았다. 하지만 실행된 소스는 catch와 finally뿐이다. 이로써 try에서 예외가 발생하면 그다음 코드를 실행하지 않고 바로 catch로 넘어간다는 것을 알 수 있다.\r\n \r\n ​\r\n \r\n 그렇다면 소스가 정상적으로 출력되었을 때는 어떨까?\r\n \r\n ![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcIHyOM%2FbtqNuPdYSKq%2F0tkSckgiMR1HraoxsH8hU1%2Fimg.png)\r\n \r\n try 안의 출력문이 정상적으로 출력되었을 뿐만 아니라 finally의 출력문도 함께 실행되었다.\r\n \r\n ​\r\n \r\n 이처럼 finally에는 예외 발생 여부와 상관없이 반드시 실행되어야 하는 부분을 넣으면 된다.\r\n \r\n ​\r\n \r\n > 2\\. 커스텀 익셉션 (Custom Exception)\r\n \r\n 커스텀 Exception은 Exception 클래스에 명시되지 않은 예외를 처리하고 싶을 때 사용할 수 있다.\r\n \r\n ​\r\n \r\n 간단히 상속의 흐름을 알아보자면 예외 처리를 하기 위한 최상위 클래스인 Throwable 클래스가 있고, 이를 상속받는 Error 클래스와 Exception 클래스가 있다.\r\n \r\n ​\r\n \r\n Exception 클래스는 모든 예외를 처리할 수 있는 코드들을 담고 있고 Error 클래스는 모든 오류들을 담고 있는 클래스라고 할 수 있다.\r\n \r\n ​\r\n \r\n 때문에 커스텀 예외 처리를 위해서는 새로운 클래스를 생성하고 Exception 클래스를 상속받아야 한다.\r\n \r\n ​\r\n \r\n 예를 들어 나이를 출력하는 프로그램이 있다고 하자. 나이는 음수가 될 수 없기 때문에 오류가 발생해야 하는데 Exception 클래스 내에는 정의되어 있지 않다. 그렇기 때문에 직접 예외를 발생시키는 것이다.\r\n \r\n ![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FyxfTm%2FbtqNEev3Pqe%2FK019HJgdX1Q7wAOvrecL50%2Fimg.png)\r\n \r\n ​\r\n \r\n 위 코드에서 낯선 부분이 두 가지 정도 보인다.\r\n \r\n 1\\. throw\r\n \r\n 2\\. throws 예외명\r\n \r\n ​\r\n \r\n 간단히 말하자면 throw는 내가 직접 발생시킨 예외를 던지는 행위에 해당한다.\r\n \r\n Exception에 명시된 예외는 JVM이 인식하여 내부적으로 처리하지만 커스텀 익셉션은 그렇지 못하다. 그렇기 때문에 사용자가 직접 예외를 생성하여 던져 주어야 한다.\r\n \r\n ​\r\n \r\n 메소드 선언문 옆 throws 예외명은 발생한 예외를 처리하지 않겠다고 선언하는 것이다.\r\n \r\n custom 메소드에서 처리되지 못한 예외는 해당 메소드가 호출된 곳으로 돌아가면서 함께 던져지게 된다.\r\n \r\n 돌아간 부분이 try catch 형식 안이기 때문에 던져진(throw) 예외가 잡힐(catch) 수 있는 것이다.\r\n \r\n 쉽게 말해 custom 메소드는 자신의 예외를 메인 메소드에게 미룬 것과 같다.\r\n \r\n ​\r\n \r\n 만약 메인 메소드에도 throws AgeException가 선언되어 있었다면 예외는 처리되지 못하고 결국 프로그램은 예외 메시지를 띄우며 강제 종료된다.\r\n \r\n ​\r\n \r\n 그렇기 때문에 예외를 던지면 잡거나(catch) 받지 않겠다 명시(throws 예외명)하거나 둘 중 하나는 반드시 해야 한다.\r\n \r\n![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbW7V83%2FbtqNCfoV0oF%2FFAOvQmCTxsSzowN0S8MqJK%2Fimg.png)\r\n \r\n ​\r\n \r\n > 3\\. 가볍게 읽어볼 내용\r\n \r\n 1\\. getMessage는 예외 상황을 알리기 위해 정의된 모든 예외 클래스들이 상속하는 Throwable 클래스에 정의되어 있는 메소드이다. 모든 예외들은 Throwable 클래스를 상속받는다.\r\n \r\n ​\r\n \r\n 2\\. Exception 종류\r\n \r\n \\>> ArrayIndexOutOfBoundsException : 배열에 잘못된 인덱스 값을 사용하는 예외\r\n \r\n \\>> ClassCastException : 허용되지 않는 형 변환을 진행하는 예외\r\n \r\n \\>> NegativeArraySizeException : 배열의 크기를 음수로 지정하는 예외\r\n \r\n \\>> NullPointerException : 참조 변수가 null인 상태에서 메소드를 호출할 때 발생하는 예외\r\n \r\n ​\r\n \r\n 3\\. try catch에서 두 개 이상의 catch를 사용할 경우 상위 클래스가 먼저 올 수 없다.\r\n \r\n // 불가능한 예시 try { ... } catch(Throwable e) { // 가장 최상위 클래스이기 때문에 아래 예외가 실행될 수 X ... } catch(ArithmeticException e) { ... } // 가능한 예시 try { ... } catch(ArithmeticException e) { ... } catch(Throwable e) { ... }\r\n \r\n ​\r\n \r\n 4\\. throw는 예외 상황이 발생되었음을 자바 가상머신에게 알리는 키워드다. 따라서 이 문장이 실행되면서 자바의 예외 처리 메커니즘이 동작하게 된다.\r\n \r\n ​\r\n \r\n 5\\. Throwable 클래스에 정의되어 있는 printStackTrace 메소드로 예외가 발생하여 전달되는 과정을 출력할 수 있다.\r\n \r\n ​\r\n \r\n 6\\. 가상머신의 예외 처리 방식\r\n \r\n \\>> 1) getMessage 메소드를 호출한다.\r\n \r\n \\>> 2) 예외 상황이 발생하여 전달되는 과정을 출력해 준다. (printStackTrace 메소드)\r\n \r\n \\>> 3) 프로그램을 종료한다.\r\n \r\n ​\r\n \r\n 7\\. Throwable을 상속하는 예외 클래스는 Error와 Exception 두 가지이다.\r\n \r\n 그런데 Error는 이름처럼 단순한 예외로 볼 수 없는 심각한 오류 상황을 표현하기 위해 정의된 클래스이다. 따라서 이 클래스를 상속하여 정의된 클래스는(프로그래머가 정의하는 클래스 X) 프로그램의 실행을 멈춰야 할 정도로 매우 심각한 오류 상황을 표현하는 데 사용된다.\r\n \r\n ​\r\n \r\n 8\\. Error 클래스를 상속하는 대표적인 클래스는 VirtualMachineError이다. API 문서에서는 이 클래스를 \"자바 가상머신에 문제가 생겨 더 이상 제대로 동작할 수 없는 상황을 알리기 위해 정의된 클래스이다.\"라고 설명한다. 그렇기 때문에 Error를 상속하는 클래스의 오류 상황이 발생하면, 그냥 프로그램이 종료되도록 놔두는 것이 상책이다. 프로그램이 종료된 이후 소스코드를 수정하는 등의 방식으로 원인을 해결해야 한다.\r\n \r\n ​\r\n \r\n 9\\. VirtualMachineError 클래스를 상속하는 클래스 중 OutOfMemoryError라는 클래스가 있는데, 이는 메모리 공간이 부족한 상황을 표현하는 예외 클래스이다. 따라서 이러한 오류가 발생하면, 메모리가 효율적으로 사용되도록 소스코드 자체를 변경해야 한다.\r\n \r\n ​\r\n \r\n 10\\. Exception을 상속하는 대표적 클래스는 두 가지이다.\r\n \r\n \\>> RuntimeException : 주로 프로그램의 오류가 있을 때 발생하도록 의도된 것들(NullPointer 등과 같이 부주의로 생기는 오류), 그렇기 때문에 try catch문을 사용하지 않고도 예외를 처리할 수 있다.\r\n \r\n (다만, 프로그램의 실행을 이어가기 위해 try catch문으로 해당 예외를 처리하기도 한다)\r\n \r\n \\>> IOException : 입출력과 관련된 오류, 반드시 try catch문으로 예외를 처리해야 한다.\r\n \r\n ​\r\n \r\n 11\\. Exception을 상속하는 클래스의 예외 상황이 임의의 메소드 내에서 발생한다면 해당 메소드는 반드시 두 가지 중 한 가지 방법을 선택하여 정의해야 한다.\r\n \r\n \\>> 1) try catch문을 이용하여 메소드 내의 예외 처리\r\n \r\n \\>> 2) trows를 이용하여 메소드를 호출한 영역으로 예외가 전달될 수 있도록 정의',1,1,0,154,0),
(10,'2020-12-20 15:36:56','2020-12-31 01:19:11','CSS: Flex(Flexible Box)','대부분 사이트는 전체 레이아웃이 수직 구성이며 ‘위-아래’로 스크롤 하여 사용합니다.  \r\n레이아웃을 구성할 때 가장 많이 사용하는 요소(Elements)들이 기본적으로 블록(Block) 개념으로 표시(Display)되며 이는 뷰(View)에 수직(위에서 아래로)으로 쌓이기 때문에 수직 구성은 상대적으로 쉽게 만들 수 있습니다.  \r\n하지만 수평(왼쪽에서 오른쪽으로) 구성의 경우는 상황이 조금 다릅니다.\r\n\r\n문제는 수평 구조를 만드는 속성이 명확하지 않았기 때문인데, 그래서 많은 경우<table>나float혹은inline-block등의 도움을 받았습니다.  \r\n하지만 이러한 방법들은 다양한 문제(Clear, White space 등, 해결은 가능하지만..)를 가지고 있기 때문에 결국 수평 레이아웃 구성의 차선책일 뿐이며, 이제 우리는 Flex(Flexible Box)라는 명확한 개념(속성들)으로 레이아웃을 쉽게 구성할 수 있습니다.\r\n\r\n> 위에서 쉬운 수평 구성을 얘기했지만 Flex는 쉬운 수직 구성도 가능합니다.\r\n\r\n시작하기에 앞서 간단한 얘제를 살펴봅시다.  \r\nfloat속성을 이용한 수평 구성의 경우 다음과 같이 스타일을 작성할 수 있습니다.\r\n\r\n```html\r\n<div class=\"box\"></div>\r\n<div class=\"box\"></div>\r\n<div class=\"box\"></div>\r\n<div class=\"clear-element\"></div>\r\n\r\n```\r\n\r\n```css\r\n.box {\r\n  float: left;\r\n}\r\n.clear-element {\r\n  clear: both; /* or left */\r\n}\r\n```\r\n\r\n자세한 설명은 생략하고, 위 방법은 보기엔 단순하지만box를 제외한clear-element라는 이름(class)의 다음(next) 요소도 있어야 하기 때문에 실제 사용엔 매우 불편하며 명확하지 않은 방법으로써 많은 경우 아래 방식을 사용합니다.\r\n\r\n```html\r\n<div class=\"clearfix\">\r\n  <div class=\"box\"></div>\r\n  <div class=\"box\"></div>\r\n  <div class=\"box\"></div>\r\n</div>\r\n```\r\n\r\n```css\r\n/* IE 핵이나 기타 방식을 제외하고 가장 원리에 충실한 방법 */\r\n.clearfix::after {\r\n  content: \"\";\r\n  clear: both;\r\n  display: block;\r\n}\r\n.box {\r\n  float: left;\r\n}\r\n```\r\n\r\n예제를 보면 수평이 될 요소들에 직접!float를 적용하고 그 요소들의 Container(부모 요소)에 미리 설정한clearfix를 적용합니다.\r\n\r\n그러면 Flexible Box(이하 Flex)는 어떻게 작성할 수 있을까요?  \r\n아주 간단합니다.\r\n\r\n```html\r\n<div class=\"box-container\">\r\n  <div class=\"box\"></div>\r\n  <div class=\"box\"></div>\r\n  <div class=\"box\"></div>\r\n</div>\r\n```\r\n\r\n```css\r\n.box-container {\r\n  display: flex;\r\n}\r\n```\r\n\r\nFlex는 수평이 될 요소들의 Container(box-container)에display: flex;를 적용합니다.  \r\n(세부 속성이 필요하지 않은 경우도 많기 때문에 상당히 쉽고 빠르게 수평 요소를 구성할 수 있습니다.)\r\n\r\n# CSS3 Flexible Box\r\n\r\nFlex는 요소의 크기가 불분명하거나 동적인 경우에도, 각 요소를 정렬할 수 있는 효율적인 방법을 제공합니다.\r\n\r\n우선 Flex는 2개의 개념으로 나뉩니다.  \r\n첫 번째는 Container 두 번째는 Items 입니다.  \r\n위에서 살펴본 바와 같이 Container는 Items를 감싸는 부모 요소이며, 각 Item을 정렬하기 위해선 Container가 필수입니다.\r\n\r\n주의할 부분은 Container와 Items에 적용하는 속성이 구분되어 있다는 것입니다.  \r\nContainer에는display,flex-flow,justify-content등의 속성을 사용할 수 있으며,  \r\nItems에는order,flex,align-self등의 속성을 사용할 수 있습니다.\r\n\r\n[##_Image|kage@bEVJJp/btqPII3IETa/ijs5okD4gNYpMSDzAbODhK/img.jpg|alignCenter|data-origin-width=\"0\" data-origin-height=\"0\" data-ke-mobilestyle=\"widthContent\"|||_##]\r\n\r\n## Flex Container\r\n\r\nFlex Container를 위한 속성들은 다음과 같습니다.  \r\n주 축(main-axis)과 교차 축(cross-axis)의 개념은 뒤에서 살펴봅시다.\r\n\r\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><tbody><tr><td style=\"text-align: center;\"><b>속성</b></td><td style=\"text-align: center;\"><b>의미</b></td></tr><tr><td style=\"text-align: center;\">display</td><td style=\"text-align: center;\">Flex Container를 정의</td></tr><tr><td style=\"text-align: center;\">flex-flow</td><td style=\"text-align: center;\">flex-direction와<span>&nbsp;</span>flex-wrap의 단축 속성</td></tr><tr><td style=\"text-align: center;\">flex-direction</td><td style=\"text-align: center;\">Flex Items의 주 축(main-axis)을 설정</td></tr><tr><td style=\"text-align: center;\">flex-wrap</td><td style=\"text-align: center;\">Flex Items의 여러 줄 묶음(줄 바꿈) 설정</td></tr><tr><td style=\"text-align: center;\">justify-content</td><td style=\"text-align: center;\">주 축(main-axis)의 정렬 방법을 설정</td></tr><tr><td style=\"text-align: center;\">align-content</td><td style=\"text-align: center;\">교차 축(cross-axis)의 정렬 방법을 설정(2줄 이상)</td></tr><tr><td style=\"text-align: center;\">align-items</td><td style=\"text-align: center;\">교차 축(cross-axis)에서 Items의 정렬 방법을 설정(1줄)</td></tr></tbody></table>\r\n\r\n### display\r\n\r\ndisplay속성으로 Flex Container를 정의합니다.  \r\n보통 요소의 표시 방법을display: block;,display: inline-block혹은display: none;같이 사용하는 경우가 많죠.  \r\n같은 요소의 표시 방법으로 Block이나 Inline이 아닌 Flex(display: flex,display: inline-flex)로 정의합니다.\r\n\r\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><tbody><tr><td style=\"text-align: center;\"><b>값</b></td><td style=\"text-align: center;\"><b>의미</b></td></tr><tr><td style=\"text-align: center;\">flex</td><td style=\"text-align: center;\">Block 특성의 Flex Container를 정의</td></tr><tr><td style=\"text-align: center;\">inline-flex</td><td style=\"text-align: center;\">Inline 특성의 Flex Container를 정의</td></tr></tbody></table>\r\n\r\nflex와inline-flex는 차이는 단순합니다.  \r\ndisplay: flex;로 지정된 Flex Container는 Block 요소와 같은 성향(수직 쌓임)을 가지며,  \r\ndisplay: inline-flex로 지정된 Flex Container는 Inline(Inline Block) 요소와 같은 성향(수평 쌓임)을 가집니다.\r\n\r\n여기서 말하는 수직과 수평 쌓임은 Items가 아니라 Container라는 것에 주의합시다.  \r\n두 값의 차이는 내부에 Items에는 영향을 주지 않습니다.\r\n\r\n[##_Image|kage@VxrOR/btqPENqZ7wl/n9BWxc0Upgj8CVPFxytQsk/img.jpg|alignCenter|data-origin-width=\"0\" data-origin-height=\"0\" data-ke-mobilestyle=\"widthContent\"|||_##]\r\n\r\n### **flex-flow**\r\n\r\n이 속성은 단축 속성으로 Flex Items의 주 축(main-axis)을 설정하고 Items의 여러 줄 묶음(줄 바꿈)도 설정합니다.\r\n\r\n```css\r\nflex-flow: 주축 여러줄묶음;\r\n```\r\n\r\n```css\r\n.flex-container {\r\n  flex-flow: row-reverse wrap;\r\n}\r\n```\r\n\r\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><tbody><tr><td style=\"text-align: center;\"><b>값</b></td><td style=\"text-align: center;\"><b>의미</b></td><td style=\"text-align: center;\"><b>기본값</b></td></tr><tr><td style=\"text-align: center;\">flex-direction</td><td style=\"text-align: center;\">Items의 주 축(main-axis)을 설정</td><td style=\"text-align: center;\">row</td></tr><tr><td style=\"text-align: center;\">flex-wrap</td><td style=\"text-align: center;\">Items의 여러 줄 묶음(줄 바꿈) 설정</td><td style=\"text-align: center;\">nowrap</td></tr></tbody></table>\r\n\r\n개별 속성을 알아봅시다.\r\n\r\n**\\- flex-direction**\r\n\r\nItems의 주 축(main-axis)을 설정합니다.\r\n\r\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><tbody><tr><td style=\"text-align: center;\"><b>값</b></td><td style=\"text-align: center;\"><b>의미</b></td><td style=\"text-align: center;\"><b>기본값</b></td></tr><tr><td style=\"text-align: center;\">row</td><td style=\"text-align: center;\">Itmes를 수평축(왼쪽에서 오른쪽으로)으로 표시</td><td style=\"text-align: center;\">row</td></tr><tr><td style=\"text-align: center;\">row-reverse</td><td style=\"text-align: center;\">Items를<span>&nbsp;</span>row의 반대 축으로 표시</td><td style=\"text-align: center;\">&nbsp;</td></tr><tr><td style=\"text-align: center;\">column</td><td style=\"text-align: center;\">Items를 수직축(위에서 아래로)으로 표시</td><td style=\"text-align: center;\">&nbsp;</td></tr><tr><td style=\"text-align: center;\">column-reverse</td><td style=\"text-align: center;\">Items를<span>&nbsp;</span>column의 반대 축으로 표시</td><td style=\"text-align: center;\">&nbsp;</td></tr></tbody></table>\r\n\r\n```css\r\nflex-direction: 주축;\r\n```\r\n\r\n[##_Image|kage@bFMbGK/btqPLPgLe7N/z4IQlbYEfedngtH9JFBb40/img.jpg|alignCenter|data-origin-width=\"0\" data-origin-height=\"0\" data-ke-mobilestyle=\"widthContent\"|||_##]\r\n\r\n**\\- 주 축(main-axis)과 교차 축(cross-axis)**\r\n\r\n위에서 언급했었던 주 축(main-axis)과 교차 축(cross-axis)의 개념은 다음과 같습니다.  \r\n값row는 Items를 수평축으로 표시하므로 이때는 주 축이 수평이며 교차 축은 수직이 됩니다.  \r\n반대로 값column은 Items를 수직축으로 표시하므로 주 축은 수직이며 교차 축은 수평이 됩니다.  \r\n즉, 방향(수평, 수직)에 따라 주 축과 교차 축이 달라집니다.\r\n\r\n[##_Image|kage@bpbNj8/btqPFUi7HlW/8V4m1hcBCkaK2M4GAuPuqk/img.jpg|alignCenter|data-origin-width=\"0\" data-origin-height=\"0\" data-ke-mobilestyle=\"widthContent\"|||_##]\r\n\r\n시작점(flex-start)과 끝점(flex-end)\r\n\r\n시작점(flex-start)과 끝점(flex-end)이라는 개념도 있습니다.  \r\n이는 주 축이나 교차 축의 시작하는 지점과 끝나는 지점을 지칭합니다.  \r\n역시 방향에 따라 시작점과 끝점이 달라집니다.\r\n\r\n[##_Image|kage@bgfjma/btqPAtGPpS0/tW5YA8RDuRkcHMH5vo2cLK/img.jpg|alignCenter|data-origin-width=\"0\" data-origin-height=\"0\" data-ke-mobilestyle=\"widthContent\"|||_##]\r\n\r\n[##_Image|kage@4RGcz/btqPAulx4hJ/owE42vAvxNizTnQGz4BhWK/img.jpg|alignCenter|data-origin-width=\"0\" data-origin-height=\"0\" data-ke-mobilestyle=\"widthContent\"|||_##]\r\n\r\n뒤에서 언급할 속성 중 값으로flex-start와flex-end를 사용하는데 이는 방향에 맞는 그 시작점과 끝점을 의미합니다.\r\n\r\n**\\- flex-wrap**\r\n\r\nItems의 여러 줄 묶음(줄 바꿈)을 설정합니다.\r\n\r\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><tbody><tr><td style=\"text-align: center;\"><b>값</b></td><td style=\"text-align: center;\"><b>의미</b></td><td style=\"text-align: center;\"><b>기본값</b></td></tr><tr><td style=\"text-align: center;\">nowrap</td><td style=\"text-align: center;\">모든 Itmes를 여러 줄로 묶지 않음(한 줄에 표시)</td><td style=\"text-align: center;\">nowrap</td></tr><tr><td style=\"text-align: center;\">wrap</td><td style=\"text-align: center;\">Items를 여러 줄로 묶음</td><td style=\"text-align: center;\">&nbsp;</td></tr><tr><td style=\"text-align: center;\">wrap-reverse</td><td style=\"text-align: center;\">Items를<span>&nbsp;</span>wrap의 역 방향으로 여러 줄로 묶음</td><td style=\"text-align: center;\">&nbsp;</td></tr></tbody></table>\r\n\r\n```css\r\nflex-wrap: 여러줄묶음;\r\n```\r\n\r\n기본적으로 Items는 한 줄에서만 표시되고 줄 바꿈 되지 않습니다.  \r\n이는 지정된 크기(주 축에 따라width나height)를 무시하고 한 줄 안에서만 가변합니다.  \r\nItems를 줄 바꿈 하려면 값으로wrap을 사용해야 합니다.\r\n\r\n[##_Image|kage@IPw8E/btqPFVvvPhS/45ZCpplPeu92lTVStBNqYk/img.jpg|alignCenter|data-origin-width=\"0\" data-origin-height=\"0\" data-ke-mobilestyle=\"widthContent\"|||_##]\r\n\r\n### **justify-content**\r\n\r\n주 축(main-axis)의 정렬 방법을 설정합니다.\r\n\r\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><tbody><tr><td style=\"text-align: center;\"><b>값</b></td><td style=\"text-align: center;\"><b>의미</b></td><td style=\"text-align: center;\"><b>기본값</b></td></tr><tr><td style=\"text-align: center;\">flex-start</td><td style=\"text-align: center;\">Items를 시작점(flex-start)으로 정렬</td><td style=\"text-align: center;\">flex-start</td></tr><tr><td style=\"text-align: center;\">flex-end</td><td style=\"text-align: center;\">Items를 끝점(flex-end)으로 정렬</td><td style=\"text-align: center;\">&nbsp;</td></tr><tr><td style=\"text-align: center;\">center</td><td style=\"text-align: center;\">Items를 가운데 정렬</td><td style=\"text-align: center;\">&nbsp;</td></tr><tr><td style=\"text-align: center;\">space-between</td><td style=\"text-align: center;\">시작 Item은 시작점에, 마지막 Item은 끝점에 정렬되고 나머지 Items는 사이에 고르게 정렬됨</td><td style=\"text-align: center;\">&nbsp;</td></tr><tr><td style=\"text-align: center;\">space-around</td><td style=\"text-align: center;\">Items를 균등한 여백을 포함하여 정렬</td><td style=\"text-align: center;\">&nbsp;</td></tr></tbody></table>\r\n\r\n```css\r\njustify-content: 정렬방법;\r\n```\r\n\r\n[##_Image|kage@bQW6O7/btqPDJPVrAk/niiu0lGnUd2kxPRAyk2LS1/img.jpg|alignCenter|data-origin-width=\"0\" data-origin-height=\"0\" data-ke-mobilestyle=\"widthContent\"|||_##]\r\n\r\n### **align-content**\r\n\r\n교차 축(cross-axis)의 정렬 방법을 설정합니다.  \r\n주의할 점은flex-wrap속성을 통해 Items가 여러 줄(2줄 이상)이고 여백이 있을 경우만 사용할 수 있습니다.\r\n\r\n> Items가 한 줄일 경우align-items속성을 사용하세요.\r\n\r\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><tbody><tr><td style=\"text-align: center;\"><b>값</b></td><td style=\"text-align: center;\"><b>의미</b></td><td style=\"text-align: center;\"><b>기본값</b></td></tr><tr><td style=\"text-align: center;\">stretch</td><td style=\"text-align: center;\">Container의 교차 축을 채우기 위해 Items를 늘림</td><td style=\"text-align: center;\">stretch</td></tr><tr><td style=\"text-align: center;\">flex-start</td><td style=\"text-align: center;\">Items를 시작점(flex-start)으로 정렬</td><td style=\"text-align: center;\">&nbsp;</td></tr><tr><td style=\"text-align: center;\">flex-end</td><td style=\"text-align: center;\">Items를 끝점(flex-end)으로 정렬</td><td style=\"text-align: center;\">&nbsp;</td></tr><tr><td style=\"text-align: center;\">center</td><td style=\"text-align: center;\">Items를 가운데 정렬</td><td style=\"text-align: center;\">&nbsp;</td></tr><tr><td style=\"text-align: center;\">space-between</td><td style=\"text-align: center;\">시작 Item은 시작점에, 마지막 Item은 끝점에 정렬되고 나머지 Items는 사이에 고르게 정렬됨</td><td style=\"text-align: center;\">&nbsp;</td></tr><tr><td style=\"text-align: center;\">space-around</td><td style=\"text-align: center;\">Items를 균등한 여백을 포함하여 정렬</td><td style=\"text-align: center;\">&nbsp;</td></tr></tbody></table>\r\n\r\n```css\r\nalign-content: 정렬방법;\r\n```\r\n\r\n값stretch는 교차 축에 해당하는 너비(속성width혹은height)가 값이auto(기본값)일 경우 교차 축을 채우기 위해 자동으로 늘어납니다.\r\n\r\n[##_Image|kage@Y96o0/btqPC1J2LzY/F040RFWRMAcGU97Hc6ua7K/img.jpg|alignCenter|data-origin-width=\"0\" data-origin-height=\"0\" data-ke-mobilestyle=\"widthContent\"|||_##]\r\n\r\n### **align-items**\r\n\r\n교차 축(cross-axis)에서 Items의 정렬 방법을 설정합니다.  \r\nItems가 한 줄일 경우 많이 사용합니다.\r\n\r\n주의할 점은 Items가flex-wrap을 통해 여러 줄(2줄 이상)일 경우에는align-content속성이 우선합니다.  \r\n따라서align-items를 사용하려면align-content속성을 기본값(stretch)으로 설정해야 합니다.\r\n\r\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><tbody><tr><td style=\"text-align: center;\"><b>값</b></td><td style=\"text-align: center;\"><b>의미</b></td><td style=\"text-align: center;\"><b>기본값</b></td></tr><tr><td style=\"text-align: center;\">stretch</td><td style=\"text-align: center;\">Container의 교차 축을 채우기 위해 Items를 늘림</td><td style=\"text-align: center;\">stretch</td></tr><tr><td style=\"text-align: center;\">flex-start</td><td style=\"text-align: center;\">Items를 각 줄의 시작점(flex-start)으로 정렬</td><td style=\"text-align: center;\">&nbsp;</td></tr><tr><td style=\"text-align: center;\">flex-end</td><td style=\"text-align: center;\">Items를 각 줄의 끝점(flex-end)으로 정렬</td><td style=\"text-align: center;\">&nbsp;</td></tr><tr><td style=\"text-align: center;\">center</td><td style=\"text-align: center;\">Items를 가운데 정렬</td><td style=\"text-align: center;\">&nbsp;</td></tr><tr><td style=\"text-align: center;\">baseline</td><td style=\"text-align: center;\">Items를 문자 기준선에 정렬</td><td style=\"text-align: center;\">&nbsp;</td></tr></tbody></table>\r\n\r\n```css\r\nalign-items: 정렬방법;\r\n```\r\n\r\n[##_Image|kage@b6YoNM/btqPKvbL3cy/kbCFE2e88hdkkJkDp2zMx0/img.jpg|alignCenter|data-origin-width=\"0\" data-origin-height=\"0\" data-ke-mobilestyle=\"widthContent\"|||_##]\r\n\r\n## **Flex Items**\r\n\r\nFlex Items를 위한 속성들은 다음과 같습니다.\r\n\r\n속성의미\r\n\r\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><tbody><tr><td>order</td><td>Flex Item의 순서를 설정</td></tr><tr><td>flex</td><td>flex-grow,<span>&nbsp;</span>flex-shrink,<span>&nbsp;</span>flex-basis의 단축 속성</td></tr><tr><td>flex-grow</td><td>Flex Item의 증가 너비 비율을 설정</td></tr><tr><td>flex-shrink</td><td>Flex Item의 감소 너비 비율을 설정</td></tr><tr><td>flex-basis</td><td>Flex Item의 (공간 배분 전) 기본 너비 설정</td></tr><tr><td>align-self</td><td>교차 축(cross-axis)에서 Item의 정렬 방법을 설정</td></tr></tbody></table>\r\n\r\n### **order**\r\n\r\nItem의 순서를 설정합니다.  \r\nItem에 숫자를 지정하고 숫자가 클수록 순서가 밀립니다.  \r\n음수가 허용됩니다.\r\n\r\n> HTML 구조와 상관없이 순서를 변경할 수 있기 때문에 유용합니다.\r\n\r\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><tbody><tr><td style=\"text-align: center;\"><b>값</b></td><td style=\"text-align: center;\"><b>의미</b></td><td style=\"text-align: center;\"><b>기본값</b></td></tr><tr><td style=\"text-align: center;\">숫자</td><td style=\"text-align: center;\">Item의 순서를 설정</td><td style=\"text-align: center;\">0</td></tr></tbody></table>\r\n\r\n```css\r\norder: 순서;\r\n```\r\n\r\n[##_Image|kage@5DCyE/btqPLPnvGb0/KHw5xziE5MI8W0DKtsm6DK/img.jpg|alignCenter|data-origin-width=\"0\" data-origin-height=\"0\" data-ke-mobilestyle=\"widthContent\"|||_##]\r\n\r\n### **flex**\r\n\r\nItem의 너비(증가, 감소, 기본)를 설정하는 단축 속성입니다.\r\n\r\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><tbody><tr><td style=\"text-align: center;\"><b>값</b></td><td style=\"text-align: center;\"><b>의미</b></td><td style=\"text-align: center;\"><b>기본값</b></td></tr><tr><td style=\"text-align: center;\">flex-grow</td><td style=\"text-align: center;\">Item의 증가 너비 비율을 설정</td><td style=\"text-align: center;\">0</td></tr><tr><td style=\"text-align: center;\">flex-shrink</td><td style=\"text-align: center;\">Item의 감소 너비 비율을 설정</td><td style=\"text-align: center;\">1</td></tr><tr><td style=\"text-align: center;\">flex-basis</td><td style=\"text-align: center;\">Item의 (공간 배분 전) 기본 너비 설정</td><td style=\"text-align: center;\">auto</td></tr></tbody></table>\r\n\r\n```css\r\nflex: 증가너비 감소너비 기본너비;\r\n```\r\n\r\n```css\r\n.item {\r\n  flex: 1 1 20px;  /* 증가너비 감소너비 기본너비 */\r\n  flex: 1 1;  /* 증가너비 감소너비 */\r\n  flex: 1 20px;  /* 증가너비 기본너비 (단위를 사용하면 flex-basis가 적용됩니다) */\r\n}\r\n```\r\n\r\nflex-grow를 제외한 개별 속성은 생략할 수 있습니다.  \r\n만약flex: 1;로 작성하면flex-grow: 1;과 같습니다.  \r\n그러면 나머지 속성은 생략했으니 기본값이 적용되어flex-shrink: 1;,flex-basis: auto;가 되겠죠?  \r\n즉flex: 1;혹은flex: 1 1;은flex: 1 1 auto;와 같다고 볼 수 있습니다만 그렇지 않습니다.\r\n\r\nflex-basis의 기본값은auto입니다만 단축 속성인flex에서 그 값을 생략할 경우0이 적용됩니다.  \r\n다시 정리하면flex: 1;혹은flex: 1 1;은flex: 1 1 0;이 된다는 것입니다.  \r\n이 부분을 기억하지 않으면 엉뚱한 결과가 나올 수 있으니 주의합시다!\r\n\r\n**\\- flex-grow**\r\n\r\nItem의 증가 너비 비율을 설정합니다.  \r\n숫자가 크면 더 많은 너비를 가집니다.  \r\nItem이 가변 너비가 아니거나, 값이0일 경우 효과가 없습니다.\r\n\r\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><tbody><tr><td style=\"text-align: center;\"><b>값</b></td><td style=\"text-align: center;\"><b>의미</b></td><td style=\"text-align: center;\"><b>기본값</b></td></tr><tr><td style=\"text-align: center;\">숫자</td><td style=\"text-align: center;\">Item의 증가 너비 비율을 설정</td><td style=\"text-align: center;\">0</td></tr></tbody></table>\r\n\r\n```css\r\nflex-grow: 증가너비;\r\n```\r\n\r\n모든 Items의 총 증가 너비(flex-grow)에서 각 Item의 증가 너비의 비율 만큼 너비를 가질 수 있습니다.  \r\n예를 들어 Item이 3개이고 증가 너비가 각각1,2,1이라면,  \r\n첫 번째 Item은 총 너비의 25%(1/4)을,  \r\n두 번째 Item은 총 너비의 50%(2/4)를,  \r\n세 번째 Item은 총 너비의 25%(1/4)을 가지게 됩니다.\r\n\r\n[##_Image|kage@Z0srl/btqPDJ3nkMZ/pvafsKOysX0ojAUGU281sk/img.jpg|alignCenter|data-origin-width=\"0\" data-origin-height=\"0\" data-ke-mobilestyle=\"widthContent\"|||_##]\r\n\r\n**\\- flex-shrink**\r\n\r\nItem이 감소하는 너비의 비율을 설정합니다.  \r\n숫자가 크면 더 많은 너비가 감소합니다.  \r\nItem이 가변 너비가 아니거나, 값이0일 경우 효과가 없습니다.\r\n\r\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><tbody><tr><td style=\"text-align: center;\"><b>값</b></td><td style=\"text-align: center;\"><b>의미</b></td><td style=\"text-align: center;\"><b>기본값</b></td></tr><tr><td style=\"text-align: center;\">숫자</td><td style=\"text-align: center;\">Item의 감소 너비 비율을 설정</td><td style=\"text-align: center;\">1</td></tr></tbody></table>\r\n\r\n```css\r\nflex-shrink: 감소너비;\r\n```\r\n\r\n감소 너비(flex-shrink)는 요소의 너비에 영향을 받기 때문에 계산하기 까다롭습니다.  \r\n영향을 받는다는 요소의 너비는width,height,flex-basis등으로 너비가 지정된 경우를 의미합니다.  \r\nContainer의 너비가 줄어 Items의 너비에 영향을 미칠 경우, 영향을 미치기 시작한 지점부터 줄어든 거리 만큼 감소 너비 비율에 맞게 Item의 너비가 줄어듭니다.\r\n\r\n예를 들어 Container의 너비가 줄어 Item의 너비에 영향을 미치기 시작한 지점부터 실제 줄어든 거리가90px일 때,  \r\n요소 너비가 같은 Item이 2개이고 지정된 감소 너비가 각각2와1이라면,  \r\n감소 너비는 2:1 비율이며,  \r\n첫 번째 Item은90px의 2/3인60px만큼 너비가 감소하고,  \r\n두 번째 Item은90px의 1/3인30px만큼 너비가 감소합니다.\r\n\r\n다른 예시로 Container의 너비가 줄어 Item의 너비에 영향을 미치기 시작한 지점부터 실제 줄어든 거리가90px일 때,  \r\n요소 너비가 다른 Item이 2개이고 요소 너비는 각각200과100이고,  \r\n지정된 감소 너비가 각각2와1이라면,  \r\n200 x 2 = 400과100 x 1 = 100즉 감소 너비는 4:1 비율이며,  \r\n첫 번째 Item은90px의 4/5인72px만큼 너비가 감소하고,  \r\n두 번째 Item은90px의 1/5인18px만큼 너비가 감소합니다.\r\n\r\n[##_Image|kage@dZFI5x/btqPKuKH8GD/SDp5KET81Axsxbzxkh8Lak/img.jpg|alignCenter|data-origin-width=\"0\" data-origin-height=\"0\" data-ke-mobilestyle=\"widthContent\"|||_##]\r\n\r\n계산이 까다롭기 때문에 활용도는 조금 떨어진다고 생각합니다.  \r\n원리 정도만 이해하고 넘어갑시다.\r\n\r\n**\\- flex-basis**\r\n\r\nItem의 (공간 배분 전) 기본 너비를 설정합니다.  \r\n값이auto일 경우width,height등의 속성으로 Item의 너비를 설정할 수 있습니다.  \r\n하지만 단위 값이 주어질 경우 설정할 수 없습니다.\r\n\r\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><tbody><tr><td style=\"text-align: center;\"><b>값</b></td><td style=\"text-align: center;\"><b>의미</b></td><td style=\"text-align: center;\"><b>기본값</b></td></tr><tr><td style=\"text-align: center;\">auto</td><td style=\"text-align: center;\">가변 Item과 같은 너비</td><td style=\"text-align: center;\">auto</td></tr><tr><td style=\"text-align: center;\">단위</td><td style=\"text-align: center;\">px, em, cm 등 단위로 지정</td><td style=\"text-align: center;\">&nbsp;</td></tr></tbody></table>\r\n\r\n```css\r\nflex-basis: 기본너비;\r\n```\r\n\r\nflex속성에서 설명한 것 같이 단축 속성 내에서flex-basis를 생략하면 값이0이 되는 것을 주의합시다.\r\n\r\n[##_Image|kage@cSmD7P/btqPDI4xBqf/6TFhsVeKkUzhhLkPtnXe80/img.jpg|alignCenter|data-origin-width=\"0\" data-origin-height=\"0\" data-ke-mobilestyle=\"widthContent\"|||_##]\r\n\r\n### align-self\r\n\r\n교차 축(cross-axis)에서 개별 Item의 정렬 방법을 설정합니다.\r\n\r\nalign-items는 Container 내 모든 Items의 정렬 방법을 설정합니다.  \r\n필요에 의해 일부 Item만 정렬 방법을 변경하려고 할 경우align-self를 사용할 수 있습니다.  \r\n이 속성은align-items속성보다 우선합니다.\r\n\r\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><tbody><tr><td style=\"text-align: center;\"><b>값</b></td><td style=\"text-align: center;\"><b>의미</b></td><td style=\"text-align: center;\"><b>기본값</b></td></tr><tr><td style=\"text-align: center;\">auto</td><td style=\"text-align: center;\">Container의<span>&nbsp;</span>align-items<span>&nbsp;</span>속성을 상속받음</td><td style=\"text-align: center;\">auto</td></tr><tr><td style=\"text-align: center;\">stretch</td><td style=\"text-align: center;\">Container의 교차 축을 채우기 위해 Item을 늘림</td><td style=\"text-align: center;\">&nbsp;</td></tr><tr><td style=\"text-align: center;\">flex-start</td><td style=\"text-align: center;\">Item을 각 줄의 시작점(flex-start)으로 정렬</td><td style=\"text-align: center;\">&nbsp;</td></tr><tr><td style=\"text-align: center;\">flex-end</td><td style=\"text-align: center;\">Item을 각 줄의 끝점(flex-end)으로 정렬</td><td style=\"text-align: center;\">&nbsp;</td></tr><tr><td style=\"text-align: center;\">center</td><td style=\"text-align: center;\">Item을 가운데 정렬</td><td style=\"text-align: center;\">&nbsp;</td></tr><tr><td style=\"text-align: center;\">baseline</td><td style=\"text-align: center;\">Item을 문자 기준선에 정렬</td><td style=\"text-align: center;\">&nbsp;</td></tr></tbody></table>\r\n\r\n```css\r\nalign-self: 정렬방법;\r\n```\r\n\r\n[##_Image|kage@mJTtC/btqPLOITNci/cCDj0L5HwEDsEoKXvywrLk/img.jpg|alignCenter|data-origin-width=\"0\" data-origin-height=\"0\" data-ke-mobilestyle=\"widthContent\"|||_##]\r\n\r\n출처: [https://heropy.blog/2018/11/24/css-flexible-box/](https://heropy.blog/2018/11/24/css-flexible-box/)',1,3,0,56,0),
(11,'2020-12-20 15:37:11','2020-12-31 01:19:11','Java - split, substring으로 문자열을 자르기 & 분리하기','Java에서 String을 자르는 방법은 다음과 같이 여러가지 방법이 있습니다.\r\n\r\n-   String.split\r\n-   String.substring\r\n-   Commons-io 라이브러리\r\n\r\n각각 예제를 통해 어떻게 문자열을 자르는지 알아보겠습니다.\r\n\r\n## String.split()으로 문자열 자르기\r\n\r\nsplit()은 어떤 문자 기준으로 문자열을 자르고 배열로 리턴해 줍니다.\r\n\r\nString은 다음과 같은 메소드들을 제공합니다.\r\n\r\n```java\r\npublic String[] split(String regex)\r\npublic String[] split(String regex, int limit)\r\n```\r\n\r\n-   인자 regex는[정규표현식(regex)](https://codechacha.com/ko/java-regex/)으로 문자열 패턴을 받고, 그 패턴과 일치하는 문자열을 기준으로 잘라줍니다.\r\n-   인자 limit은 문자열을 나눌 최대 개수입니다. 인자로 2를 전달하면 리턴되는 배열의 길이가 2 이하가 됩니다.\r\n\r\n다음은split()을 사용하여 문자열을 자르는 예제입니다.\r\n\r\n```java\r\nString str = \"Hi guys This is split example\";\r\n\r\nString[] result = str.split(\" \");\r\nString[] result2 = str.split(\" \", 2);\r\nString[] result3 = str.split(\" \", 3);\r\n\r\nSystem.out.println(Arrays.toString(result));\r\nSystem.out.println(Arrays.toString(result2));\r\nSystem.out.println(Arrays.toString(result3));\r\n```\r\n\r\nOutput:\r\n\r\n```java\r\n[Hi, guys, This, is, split, example]\r\n[Hi, guys This is split example]\r\n[Hi, guys, This is split example]\r\n```\r\n\r\n이 예제에서는 공백으로 문자열을 잘랐습니다. 또한, 설정된 limit의 개수만큼만 문자열을 자르는 것을 볼 수 있습니다.\r\n\r\n다른 예제로, 개행 문자\\\\n로 문자열을 자를 수도 있습니다.\r\n\r\n```java\r\nString str = \"Hi guys\\n\" +\r\n        \"This is split example\\n\" +\r\n        \"I\'ll show you how to use split method\";\r\nString[] result = str.split(\"\\n\");\r\n\r\nSystem.out.println(Arrays.toString(result));\r\n```\r\n\r\nOutput:\r\n\r\n```java\r\n[Hi guys, This is split example, I\'ll show you how to use split method]\r\n```\r\n\r\n### 정규표현식(regex)과 split으로 문자열 자르기\r\n\r\n위의 예제는 단순한 문자를 인자로 전달하였습니다.\r\n\r\n정규표현식을 전달하여 문자열을 자를 수도 있습니다.\r\n\r\n다음은 정규표현식과 일반 문자로 잘랐을 때의 결과를 비교하는 예제입니다.\r\n\r\n```java\r\nString str = \"This island is beautiful\";\r\nString[] result = str.split(\"is\");\r\nString[] result2 = str.split(\"\\\\bis\\\\b\");\r\n\r\nSystem.out.println(Arrays.toString(result));\r\nSystem.out.println(Arrays.toString(result2));\r\n```\r\n\r\nOutput:\r\n\r\n```java\r\n[Th,  , land ,  beautiful]\r\n[This island ,  beautiful]\r\n```\r\n\r\n정규표현식을 사용하면 조금 더 섬세하게 문자열을 자를 수 있습니다.\r\n\r\n> 정규표현식에 대해서 더 알고 싶다면[Java - 정규표현식(regex), 다양한 예제로 쉽게 이해하기](https://codechacha.com/ko/java-regex/)를 읽어보시면 좋습니다.\r\n\r\n## String.substring()으로 문자열 자르기\r\n\r\nsubstring()은 인자로 전달된 index를 기준으로 문자열을 자르고 String을 리턴하는 메소드입니다.\r\n\r\nString은 다음과 같은 substring 메소드들을 제공합니다.\r\n\r\n```java\r\npublic String substring(int beginIndex)\r\npublic String substring(int beginIndex, int endIndex)\r\n```\r\n\r\n-   인자로 beginIndex만 전달하면, 이 index가 포함된 문자부터 마지막까지 잘라서 리턴합니다.\r\n-   인자로 beginIndex, endIndex를 모두 전달하면 begin을 포함한 문자부터 endIndex 이전 index의 문자까지 잘라서 리턴합니다.\r\n\r\n다음은 substring을 이용하여 문자열을 자르는 예제입니다.\r\n\r\n```java\r\nString str = \"Hi guys. This is split example\";\r\nString result = str.substring(17);\r\nString result2 = str.substring(17, 22);\r\n\r\nSystem.out.println(result);\r\nSystem.out.println(result2);\r\n```\r\n\r\nOutput:\r\n\r\n```java\r\nsplit example \r\nsplit\r\n```\r\n\r\nbeginIndex로 17을, endIndex로 22를 전달하면 index 17을 포함하고, 22를 포함하지 않는 문자열을 리턴합니다. 즉, index 17의 문자s부터, index 21의 문자는t까지 잘라서 리턴합니다.\r\n\r\n다음은indexOf()로 어떤 문자의 index를 찾고 그 index로substring()에 전달하는 예제입니다.\r\n\r\n```java\r\nString str = \"This island is beautiful\";\r\nint beginIndex = str.indexOf(\"is\");\r\nint endIndex = str.length();\r\nString result = str.substring(beginIndex, endIndex);\r\n\r\nSystem.out.println(result);\r\n```\r\n\r\nOutput:\r\n\r\n```java\r\nis island is beautiful\r\n```\r\n\r\nindexOf()는 인자로 전달된 문자열의 index를 리턴합니다. 왼쪽에서 오른쪽 순서로 탐색하며 가장 첫번째로 발견한 문자열의 index를 리턴합니다.\r\n\r\n만약is beautiful만 잘라내고 싶다면 어떻게 해야할까요? 문자열 마지막에서 왼쪽방향으로is를 찾고 그 index를 substring()으로 전달하면 됩니다. 이런 경우lastIndexOf()를 사용하면 됩니다.\r\n\r\n다음은lastIndexOf()와substring()을 사용하여 문자열을 자르는 예제입니다.\r\n\r\n```java\r\nString str = \"This island is beautiful\";\r\nint beginIndex = str.lastIndexOf(\"is\");\r\nint endIndex = str.length();\r\nString result = str.substring(beginIndex, endIndex);\r\n\r\nSystem.out.println(result);\r\n```\r\n\r\nOutput:\r\n\r\n```java\r\nis beautiful\r\n```\r\n\r\n## commons-io 라이브러리로 문자열 자르기\r\n\r\ncommons-io 라이브러리를 사용하여 문자열을 자를 수도 있습니다.\r\n\r\n### commons-io 라이브러리를 설정\r\n\r\nGradle 프로젝트는build.gradle의 dependencies에 다음과 같이 추가합니다.\r\n\r\n```java\r\ndependencies {\r\n  compile group: \'commons-io\', name: \'commons-io\', version: \'2.6\'\r\n  ...\r\n}\r\n```\r\n\r\n> Maven 등의 다른 빌드시스템을 사용하는 프로젝트는[mvnrepository.com](https://mvnrepository.com/artifact/commons-io/commons-io/2.6)을 참고하셔서 설정하시면 됩니다.\r\n\r\n### StringUtils으로 문자열 자르기\r\n\r\nStringUtils은substringBetween()메소드를 제공합니다.\r\n\r\n다음과 같이 인자로 문자열을 전달하고, 추가로 2개의 문자열을 전달하면 그 2개의 문자열 사이의 String을 잘라서 리턴해 줍니다.\r\n\r\n```java\r\nString str = \"This island is beautiful!\";\r\nString result = StringUtils.substringBetween(str, \"This \",\"!\");\r\nSystem.out.println(result);\r\n```\r\n\r\nOutput:\r\n\r\n```java\r\nisland is beautiful\r\n```\r\n\r\nsubstringAfter()는 인자로 전달된 문자열을 찾고, 그 문자열 다음부터 끝까지 잘라서 String을 리턴합니다.\r\n\r\n```java\r\nString str = \"This island is beautiful!\";\r\nString result = StringUtils.substringAfter(str, \"This \");\r\nSystem.out.println(result);\r\n```\r\n\r\nOutput:\r\n\r\n```java\r\nisland is beautiful!\r\n```\r\n\r\nsubstringBefore()는 인자로 전달된 문자열을 찾고, 처음부터 그 문자열 이전까지 잘라서 String을 리턴합니다.\r\n\r\n```java\r\nString str = \"This island is beautiful!\";\r\nString result = StringUtils.substringBefore(str, \"is \");\r\nSystem.out.println(result);\r\n```\r\n\r\nOutput:\r\n\r\n```java\r\nTh\r\n```\r\n\r\nsubstringBeforeLast()는 반대방향으로 문자열을 찾고, 처음부터 그 문자열 이전까지 잘라서 String을 리턴합니다.\r\n\r\n```java\r\nString str = \"This island is beautiful!\";\r\nString result = StringUtils.substringBeforeLast(str, \"is \");\r\nSystem.out.println(result);\r\n```\r\n\r\nOutput:\r\n\r\n```java\r\nThis island\r\n```',1,1,0,21,0),
(12,'2020-12-20 15:39:04','2020-12-31 01:19:10','자바: 아스키코드, 유니코드를 문자나 숫자로 변환하기','# 아스키 코드 \r\n\r\n미국에서 표준화가 추진된 정보교환용 7bit 부호로 정의합니다. 1962년 안시(ANSI)가 정의한 미국 표준 정보교환 코드이며 1963년 미국표준협회(ASA)에 의해 결정되어 미국의 표준부호가 되었습니다. 이 코드는 7비트의 이진수 조합으로 만들어져 총 128개의 부호를 표현합니다. 아스키코드의 처음 32개(0~31)는 프린터나 전송 제어용으로 사용되고 나머지는 숫자와 로마글자 및 도량형 기호와 문장기호를 나타냅니다. 아스키코드는 7자리의 2진코드인데 1비트의 패리티 비트를 추가하여 8비트로 많은 컴퓨터에 사용되고 있습니다.\r\n\r\n다음은 아스키코드 표 입니다.\r\n\r\n![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcQj4My%2FbtqOqUXWdmV%2FmOUfnQAPkYAzj1NfjYYtH1%2Fimg.png)\r\n\r\n# 유니코드 \r\n\r\n시간이 지나가면서 영어나 숫자 그리고 기본적인 기호뿐만 아니라 그 나라, 그 언어에서 쓰는 다양한 문자들을 처리하려면 1바이트로 정의된 아스키 코드를 확장할 필요가 있게 됩니다. 유니코드는 이런 아스키코드의 한계성을 해소할 수 있는 체계로 만들어진 코드입니다. 각 나라별 언어를 모두 표현하기 위해 나온 코드 체계가 유니코드(unicode)입니다. 유니코드는 사용중인 운영체제, 프로그램, 언어에 관계없이 문자마다 고유한 코드 값을 제공하는 새로운 개념의 코드입니다. 언어와 상관없이 모든 문자를 16비트로 표현하므로 최대 65,536자까지 포현할 수 있습니다. 자바는 모든 문서를 유니코드로 처리합니다. 유니코드표는 구할 수 없었습니다. 유니코드안에 속해있는 문자가 너무 많기 때문입니다.\r\n\r\n# 아스키코드, 유니코드를 문자나 숫자로 변환하기\r\n\r\n문자 -> 숫자 \r\n\r\n```java\r\nimport java.util.Scanner;\r\n\r\npublic class Ascii_Change {\r\n    public static void main(String[] args) {\r\n	Scanner sc = new Scanner(System.in);\r\n		\r\n	System.out.println(\"알파벳을 입력해주세요\");\r\n	char alpa = sc.nextLine().charAt(0);\r\n	int ialpa = (int)alpa;\r\n		\r\n	System.out.println(ialpa);\r\n    }\r\n}\r\n```\r\n\r\n숫자 -> 문자 \r\n\r\n```java\r\nimport java.util.Scanner;\r\n\r\npublic class Ascii_Change {\r\n    public static void main(String[] args) {\r\n	Scanner sc = new Scanner(System.in);\r\n		\r\n	System.out.println(\"숫자를 입력해주세요\");\r\n	int alpa = sc.nextInt();\r\n	char calpa = (char)alpa;\r\n		\r\n	System.out.println(calpa);\r\n    }\r\n}\r\n```',1,1,0,57,0),
(13,'2020-12-21 00:11:30','2020-12-31 01:19:10','SQL 소수점 반올림, 버림, 내림','**1\\. 반올림 ( 자르기 포함 )**\r\n\r\n**함수 : ROUND ( numeric\\_expression, length\\[, function\\])**\r\n\r\n**1) 반올림**\r\n\r\n```slq\r\n----------------------------------------------  \r\n-- 반올림  \r\n----------------------------------------------  \r\n  \r\nSELECT ROUND(12.35393,2)   \r\n--> 결과값 : 12.35000  \r\n  \r\nSELECT ROUND(12.35593,2)   \r\n--> 결과값 : 12.36000  \r\n  \r\nSELECT ROUND(12.35393,-1)   \r\n--> 결과값 : 10.00000  \r\n  \r\nSELECT ROUND(15.35393,-1)   \r\n--> 결과값 : 20.00000  \r\n  \r\nSELECT ROUND(12.35393,0)   \r\n--> 결과값 : 12.00000  \r\n```\r\n\r\n**2) 자르기**\r\n\r\n```slq\r\n----------------------------------------------  \r\n-- 자르기  \r\n----------------------------------------------  \r\n  \r\nSelect Round(98.65, 1, 1)  \r\n--> 결과값 : 98.60  \r\n  \r\nSelect Round(98.65, 0, 1)  \r\n--> 결과값 : 98.00  \r\n  \r\nSelect Round(98.65, -1, 1)  \r\n--> 결과값 : 90.00  \r\n```\r\n\r\n**2\\. 올림**\r\n\r\n**함수 : CEILING ( numeric\\_expression )**\r\n\r\n**<예>**\r\n\r\n```slq\r\n----------------------------------------------  \r\n-- 올림  \r\n----------------------------------------------  \r\n  \r\nSELECT CEILING(12.35393)   \r\n--> 결과값 : 13  \r\n  \r\nSELECT CEILING(-12.35393)   \r\n--> 결과값 : -12  \r\n  \r\nSELECT CEILING(0.00)   \r\n--> 결과값 : 0  \r\n```\r\n\r\n**3\\. 내림**\r\n\r\n**함수 : FLOOR ( numeric\\_expression )**\r\n\r\n**<예>**\r\n\r\n```slq\r\n----------------------------------------------  \r\n-- 내림  \r\n----------------------------------------------  \r\n  \r\nSELECT FLOOR(12.35393)   \r\n--> 결과값 : 12  \r\n  \r\nSELECT FLOOR(-12.35393)   \r\n--> 결과값 : -13  \r\n  \r\nSELECT FLOOR(0.00)   \r\n--> 결과값 : 0  \r\n```',1,5,1,97,0),
(14,'2020-12-21 09:03:57','2020-12-31 01:19:10','마우스 hover 효과 10가지','# 컨텐츠에 집중을 도와주는 마우스 오버효과들 총정리!\r\n\r\n오늘은 이미지와 마우스 오버시 등장하는 컨텐츠의\r\n\r\n인터랙션에 대해서 여러가지 효과를 소개해드리려 합니다!!\r\n\r\n이번에도 코드펜을 활요해서 직접 확인, 수정하실 수 있어요~\r\n\r\n![:)](http://i1.wp.com/rwdb.kr/wp-includes/images/smilies/simple-smile.png?w=1140)\r\n\r\n## **01. Mosaic**\r\n```codepen\r\nhttps://codepen.io/littlesnippets/embed/XXxGNB?height=290&amp;theme-id=9116&amp;slug-hash=XXxGNB&amp;default-tab=result&amp;user=littlesnippets\r\n```\r\n## **02. Text Switching**\r\n```codepen\r\nhttps://codepen.io/littlesnippets/embed/EKVbro?height=290&amp;theme-id=9116&amp;slug-hash=EKVbro&amp;default-tab=result&amp;user=littlesnippets\r\n```\r\n## **03. Fade In/Out**\r\n```codepen\r\nhttps://codepen.io/littlesnippets/embed/wMQBNQ?height=290&amp;theme-id=9116&amp;slug-hash=wMQBNQ&amp;default-tab=result&amp;user=littlesnippets\r\n```\r\n## **03. Panel Up/Down**\r\n```codepen\r\nhttps://codepen.io/littlesnippets/embed/VeeNYP?height=290&amp;theme-id=9116&amp;slug-hash=VeeNYP&amp;default-tab=result&amp;user=littlesnippets\r\n```\r\n## **04. Easing Zoom**\r\n```codepen\r\nhttps://codepen.io/littlesnippets/embed/BodOdR?height=290&amp;theme-id=9116&amp;slug-hash=BodOdR&amp;default-tab=result&amp;user=littlesnippets\r\n```\r\n## **04. Panel Float**\r\n```codepen\r\nhttps://codepen.io/littlesnippets/embed/xVVVPo?height=290&amp;theme-id=9116&amp;slug-hash=xVVVPo&amp;default-tab=result&amp;user=littlesnippets\r\n```\r\n## **05. Area Extension**\r\n```codepen\r\nhttps://codepen.io/littlesnippets/embed/dYwobb?height=380&amp;theme-id=9116&amp;slug-hash=dYwobb&amp;default-tab=result&amp;user=littlesnippets\r\n```\r\n## **06. Grid Line Trough**\r\n```codepen\r\nhttps://codepen.io/littlesnippets/embed/PNGOrQ?height=290&amp;theme-id=9116&amp;slug-hash=PNGOrQ&amp;default-tab=result&amp;user=littlesnippets\r\n```\r\n## **07. Embossed Rectangle**\r\n```codepen\r\nhttps://codepen.io/littlesnippets/embed/LGpgGJ?height=290&amp;theme-id=9116&amp;slug-hash=LGpgGJ&amp;default-tab=result&amp;user=littlesnippets\r\n```\r\n## **08. Text Troughout**\r\n```codepen\r\nhttps://codepen.io/littlesnippets/embed/WQXQGq?height=373&amp;theme-id=9116&amp;slug-hash=WQXQGq&amp;default-tab=result&amp;user=littlesnippets\r\n```\r\n## **09\\. Shutter Frame**\r\n```codepen\r\nhttps://codepen.io/littlesnippets/embed/eJKqOJ?height=290&amp;theme-id=9116&amp;slug-hash=eJKqOJ&amp;default-tab=result&amp;user=littlesnippets\r\n```\r\n## **10. Gradient Background**\r\n```codepen\r\nhttps://codepen.io/littlesnippets/embed/rxKBWq?height=290&amp;theme-id=9116&amp;slug-hash=rxKBWq&amp;default-tab=result&amp;user=littlesnippets\r\n```\r\n',1,6,0,97,0),
(15,'2020-12-21 09:36:16','2020-12-31 01:19:09','마크다운(MarkDown)사용법 용어?','# [](#공통-마크다운-markdown-작성법)\\[공통\\] 마크다운 markdown 작성법\r\n\r\n# [](#1-마크다운에-관하여)1\\. 마크다운에 관하여\r\n\r\n## [](#11-마크다운이란)1.1. 마크다운이란?\r\n\r\n[**Markdown**](http://whatismarkdown.com/)은 텍스트 기반의 마크업언어로 2004년 존그루버에 의해 만들어졌으며 쉽게 쓰고 읽을 수 있으며 HTML로 변환이 가능하다. 특수기호와 문자를 이용한 매우 간단한 구조의 문법을 사용하여 웹에서도 보다 빠르게 컨텐츠를 작성하고 보다 직관적으로 인식할 수 있다. 마크다운이 최근 각광받기 시작한 이유는 깃헙([https://github.com](https://github.com)) 덕분이다. 깃헙의 저장소Repository에 관한 정보를 기록하는 README.md는 깃헙을 사용하는 사람이라면 누구나 가장 먼저 접하게 되는 마크다운 문서였다. 마크다운을 통해서 설치방법, 소스코드 설명, 이슈 등을 간단하게 기록하고 가독성을 높일 수 있다는 강점이 부각되면서 점점 여러 곳으로 퍼져가게 된다.\r\n\r\n## [](#12-마크다운의-장-단점)1.2. 마크다운의 장-단점\r\n\r\n### [](#121-장점)1.2.1. 장점\r\n\r\n```java\r\n1. 간결하다.\r\n2. 별도의 도구없이 작성가능하다.\r\n3. 다양한 형태로 변환이 가능하다.\r\n3. 텍스트(Text)로 저장되기 때문에 용량이 적어 보관이 용이하다.\r\n4. 텍스트파일이기 때문에 버전관리시스템을 이용하여 변경이력을 관리할 수 있다.\r\n5. 지원하는 프로그램과 플랫폼이 다양하다.\r\n\r\n```\r\n\r\n### [](#122-단점)1.2.2. 단점\r\n\r\n```java\r\n1. 표준이 없다.\r\n2. 표준이 없기 때문에 도구에 따라서 변환방식이나 생성물이 다르다.\r\n3. 모든 HTML 마크업을 대신하지 못한다.\r\n\r\n```\r\n\r\n---\r\n\r\n# [](#2-마크다운-사용법문법)2\\. 마크다운 사용법(문법)\r\n\r\n## [](#21-헤더headers)2.1. 헤더Headers\r\n\r\n-   큰제목: 문서 제목\r\n    \r\n    ```java\r\n    This is an H1\r\n    =============\r\n    \r\n    ```\r\n    \r\n    # [](#this-is-an-h1)This is an H1\r\n    \r\n-   작은제목: 문서 부제목\r\n    \r\n    ```java\r\n    This is an H2\r\n    -------------\r\n    \r\n    ```\r\n    \r\n    [](#this-is-an-h2)This is an H2\r\n-   글머리: 1~6까지만 지원\r\n    \r\n\r\n```java\r\n# This is a H1\r\n## This is a H2\r\n### This is a H3\r\n#### This is a H4\r\n##### This is a H5\r\n###### This is a H6\r\n\r\n```\r\n\r\n# [](#this-is-a-h1)This is a H1\r\n\r\n## [](#this-is-a-h2)This is a H2\r\n\r\n### [](#this-is-a-h3)This is a H3\r\n\r\n#### [](#this-is-a-h4)This is a H4\r\n\r\n##### [](#this-is-a-h5)This is a H5\r\n\r\n###### [](#this-is-a-h6)This is a H6\r\n\r\n####### This is a H7(지원하지 않음)\r\n\r\n## [](#22-blockquote)2.2. BlockQuote\r\n\r\n이메일에서 사용하는 `>` 블럭인용문자를 이용한다.\r\n\r\n```java\r\n> This is a first blockqute.\r\n>	> This is a second blockqute.\r\n>	>	> This is a third blockqute.\r\n\r\n```\r\n\r\n> This is a first blockqute.\r\n> \r\n> > This is a second blockqute.\r\n> > \r\n> > > This is a third blockqute.\r\n\r\n이 안에서는 다른 마크다운 요소를 포함할 수 있다.\r\n\r\n> ### [](#this-is-a-h3-1)This is a H3\r\n> \r\n> -   List\r\n>     \r\n>     ```java\r\n>     code\r\n>     \r\n>     ```\r\n>     \r\n\r\n## [](#23-목록)2.3. 목록\r\n\r\n### [](#-순서있는-목록번호)● 순서있는 목록(번호)\r\n\r\n순서있는 목록은 숫자와 점을 사용한다.\r\n\r\n```java\r\n1. 첫번째\r\n2. 두번째\r\n3. 세번째\r\n\r\n```\r\n\r\n1.  첫번째\r\n2.  두번째\r\n3.  세번째\r\n\r\n**현재까지는 어떤 번호를 입력해도 순서는 내림차순으로 정의된다.**\r\n\r\n```java\r\n1. 첫번째\r\n3. 세번째\r\n2. 두번째\r\n\r\n```\r\n\r\n1.  첫번째\r\n2.  세번째\r\n3.  두번째\r\n\r\n딱히 개선될 것 같지는 않다. 존 그루버가 신경안쓰고 있다고...\r\n\r\n### [](#-순서없는-목록글머리-기호-----지원)● 순서없는 목록(글머리 기호: `*`, `+`, `-` 지원)\r\n\r\n```java\r\n* 빨강\r\n  * 녹색\r\n    * 파랑\r\n\r\n+ 빨강\r\n  + 녹색\r\n    + 파랑\r\n\r\n- 빨강\r\n  - 녹색\r\n    - 파랑\r\n\r\n```\r\n\r\n-   빨강\r\n    -   녹색\r\n        -   파랑\r\n\r\n-   빨강\r\n    -   녹색\r\n        -   파랑\r\n\r\n-   빨강\r\n    -   녹색\r\n        -   파랑\r\n\r\n혼합해서 사용하는 것도 가능하다(내가 선호하는 방식)\r\n\r\n```java\r\n* 1단계\r\n  - 2단계\r\n    + 3단계\r\n      + 4단계\r\n\r\n```\r\n\r\n-   1단계\r\n    -   2단계\r\n        -   3단계\r\n            -   4단계\r\n\r\n## [](#24-코드)2.4. 코드\r\n\r\n4개의 공백 또는 하나의 탭으로 들여쓰기를 만나면 변환되기 시작하여 들여쓰지 않은 행을 만날때까지 변환이 계속된다.\r\n\r\n### [](#241-들여쓰기)2.4.1. 들여쓰기\r\n\r\n```java\r\nThis is a normal paragraph:\r\n\r\n    This is a code block.\r\n    \r\nend code block.\r\n\r\n```\r\n\r\n실제로 적용해보면,\r\n\r\n적용예:\r\n\r\n---\r\n\r\nThis is a normal paragraph:\r\n\r\n```java\r\nThis is a code block.\r\n\r\n```\r\n\r\nend code block.\r\n\r\n---\r\n\r\n> 한줄 띄어쓰지 않으면 인식이 제대로 안되는 문제가 발생합니다.\r\n\r\n```java\r\nThis is a normal paragraph:\r\n    This is a code block.\r\nend code block.\r\n\r\n```\r\n\r\n적용예:\r\n\r\n---\r\n\r\nThis is a normal paragraph: This is a code block. end code block.\r\n\r\n---\r\n\r\n### [](#241-코드블럭)2.4.1. 코드블럭\r\n\r\n코드블럭은 다음과 같이 2가지 방식을 사용할 수 있습니다:\r\n\r\n-   `<pre><code>{code}</code></pre>` 이용방식\r\n\r\n```java\r\n<pre>\r\n<code>\r\npublic class BootSpringBootApplication {\r\n  public static void main(String[] args) {\r\n    System.out.println(\"Hello, Honeymon\");\r\n  }\r\n\r\n}\r\n</code>\r\n</pre>\r\n\r\n```\r\n\r\n```java\r\n\r\npublic class BootSpringBootApplication {\r\n  public static void main(String[] args) {\r\n    System.out.println(\"Hello, Honeymon\");\r\n  }\r\n}\r\n\r\n```java\r\n\r\n-   코드블럭코드(\"\\`\\`\\`\") 을 이용하는 방법\r\n\r\n```\r\n\r\n```java\r\npublic class BootSpringBootApplication {\r\n  public static void main(String[] args) {\r\n    System.out.println(\"Hello, Honeymon\");\r\n  }\r\n}\r\n```\r\n\r\n```\r\n\r\n```java\r\npublic class BootSpringBootApplication {\r\n  public static void main(String[] args) {\r\n    System.out.println(\"Hello, Honeymon\");\r\n  }\r\n}\r\n\r\n```java\r\n\r\n## [](#25-수평선-hr)2.5. 수평선 `<hr/>`\r\n\r\n아래 줄은 모두 수평선을 만든다. 마크다운 문서를 미리보기로 출력할 때 _페이지 나누기_ 용도로 많이 사용한다.\r\n\r\n```\r\n* * *\r\n\r\n***\r\n\r\n*****\r\n\r\n- - -\r\n\r\n---------------------------------------\r\n\r\n```java\r\n\r\n-   적용예\r\n\r\n---\r\n\r\n---\r\n\r\n---\r\n\r\n---\r\n\r\n---\r\n\r\n## [](#26-링크)2.6. 링크\r\n\r\n-   참조링크\r\n\r\n```java\r\n[link keyword][id]\r\n\r\n[id]: URL \"Optional Title here\"\r\n\r\n// code\r\nLink: [Google][googlelink]\r\n\r\n[googlelink]: https://google.com \"Go google\"\r\n\r\n```\r\n\r\nLink: [Google](https://google.com \"Go google\")\r\n\r\n-   외부링크\r\n\r\n```java\r\n사용문법: [Title](link)\r\n적용예: [Google](https://google.com, \"google link\")\r\n\r\n```\r\n\r\nLink: [Google](https://google.com, \"google link\")\r\n\r\n-   자동연결\r\n\r\n```java\r\n일반적인 URL 혹은 이메일주소인 경우 적절한 형식으로 링크를 형성한다.\r\n\r\n* 외부링크: <http://example.com/>\r\n* 이메일링크: <address@example.com>\r\n\r\n```\r\n\r\n-   외부링크: [http://example.com/](http://example.com/)\r\n-   이메일링크: [address@example.com](mailto:address@example.com)\r\n\r\n## [](#27-강조)2.7. 강조\r\n\r\n```java\r\n*single asterisks*\r\n_single underscores_\r\n**double asterisks**\r\n__double underscores__\r\n~~cancelline~~\r\n\r\n```\r\n\r\n-   _single asterisks_\r\n-   _single underscores_\r\n-   **double asterisks**\r\n-   **double underscores**\r\n-   ~cancelline~\r\n\r\n> `문장 중간에 사용할 경우에는 **띄어쓰기** 를 사용하는 것이 좋다.`  \r\n> 문장 중간에 사용할 경우에는 띄어쓰기를 사용하는 것이 좋다.\r\n\r\n## [](#28-이미지)2.8. 이미지\r\n\r\n```java\r\n![Alt text](/path/to/img.jpg)\r\n![Alt text](/path/to/img.jpg \"Optional title\")\r\n\r\n```\r\n\r\n[![석촌호수 러버덕](https://camo.githubusercontent.com/a123b2c6011765dd07b9b58e40599a0ba15336a9ddd082e85f704781c97baee2/687474703a2f2f6366696c65362e75662e746973746f72792e636f6d2f696d6167652f32343236453634363534334339423435333243374230)](https://camo.githubusercontent.com/a123b2c6011765dd07b9b58e40599a0ba15336a9ddd082e85f704781c97baee2/687474703a2f2f6366696c65362e75662e746973746f72792e636f6d2f696d6167652f32343236453634363534334339423435333243374230) [![석촌호수 러버덕](https://camo.githubusercontent.com/a123b2c6011765dd07b9b58e40599a0ba15336a9ddd082e85f704781c97baee2/687474703a2f2f6366696c65362e75662e746973746f72792e636f6d2f696d6167652f32343236453634363534334339423435333243374230 \"RubberDuck\")](https://camo.githubusercontent.com/a123b2c6011765dd07b9b58e40599a0ba15336a9ddd082e85f704781c97baee2/687474703a2f2f6366696c65362e75662e746973746f72792e636f6d2f696d6167652f32343236453634363534334339423435333243374230)\r\n\r\n사이즈 조절 기능은 없기 때문에 `<img width=\"\" height=\"\"></img>`를 이용한다.\r\n\r\n예\r\n\r\n```java\r\n<img src=\"/path/to/img.jpg\" width=\"450px\" height=\"300px\" title=\"px(픽셀) 크기 설정\" alt=\"RubberDuck\"></img><br/>\r\n<img src=\"/path/to/img.jpg\" width=\"40%\" height=\"30%\" title=\"px(픽셀) 크기 설정\" alt=\"RubberDuck\"></img>\r\n\r\n```\r\n\r\n[![RubberDuck](https://camo.githubusercontent.com/a123b2c6011765dd07b9b58e40599a0ba15336a9ddd082e85f704781c97baee2/687474703a2f2f6366696c65362e75662e746973746f72792e636f6d2f696d6167652f32343236453634363534334339423435333243374230 \"px(픽셀) 크기 설정\")](https://camo.githubusercontent.com/a123b2c6011765dd07b9b58e40599a0ba15336a9ddd082e85f704781c97baee2/687474703a2f2f6366696c65362e75662e746973746f72792e636f6d2f696d6167652f32343236453634363534334339423435333243374230)  \r\n[![RubberDuck](https://camo.githubusercontent.com/a123b2c6011765dd07b9b58e40599a0ba15336a9ddd082e85f704781c97baee2/687474703a2f2f6366696c65362e75662e746973746f72792e636f6d2f696d6167652f32343236453634363534334339423435333243374230 \"%(비율) 크기 설정\")](https://camo.githubusercontent.com/a123b2c6011765dd07b9b58e40599a0ba15336a9ddd082e85f704781c97baee2/687474703a2f2f6366696c65362e75662e746973746f72792e636f6d2f696d6167652f32343236453634363534334339423435333243374230)\r\n\r\n## [](#29-줄바꿈)2.9. 줄바꿈\r\n\r\n3칸 이상 띄어쓰기(  )를 하면 줄이 바뀐다.\r\n\r\n```java\r\n* 줄 바꿈을 하기 위해서는 문장 마지막에서 3칸이상을 띄어쓰기해야 한다. \r\n이렇게\r\n\r\n* 줄 바꿈을 하기 위해서는 문장 마지막에서 3칸이상을 띄어쓰기해야 한다.___\\\\ 띄어쓰기\r\n이렇게\r\n\r\n```\r\n\r\n-   줄 바꿈을 하기 위해서는 문장 마지막에서 3칸이상을 띄어쓰기해야 한다. 이렇게\r\n    \r\n-   줄 바꿈을 하기 위해서는 문장 마지막에서 3칸이상을 띄어쓰기해야 한다.  \r\n    이렇게\r\n    \r\n\r\n---\r\n\r\n# [](#3-마크다운-사용기)3\\. 마크다운 사용기\r\n\r\n## [](#31-위지윅wsywig-에디터)3.1. 위지윅(WSYWIG) 에디터\r\n\r\n우리가 흔하게 접하는 웹에서 사용되는 에디터(네이버, 다음, 구글 등)이 대부분 위지윅 에디터에 속하며 기본적으로 HTML을 이용하여 스타일을 적용하여 문장을 꾸미는 형태를 취하게 된다. 그래서 하루패드와 같은 마크다운 에디터의 View 영역의 내용을 복사하여 붙여넣기를 하면 대체적으로 View영역에서 보이는 그대로 복사되는 편이다. 다만, 붙여넣기 이후에 문장들을 수정하려고 할 떄 문제가 되는데, 이는 스타일이 포함된 태그가 수정과정에서 변형되면서 전체적인 영향을 끼치는 탓이다. 티스토리 블로그에서는 쉽지 않고... 워드프레스의 경우에는 마크다운으로 작성된 포스트를 HTML로 변환해주는 기능을 활용하는 것이 좋다. 결론은, **복사해서 붙여넣기하면 가급적이면 본문은 수정하지 않는 것이 좋다.**\r\n\r\n## [](#32-깃헙github-비트버킷bitbucket과-요비yobi-등)3.2. 깃헙Github, 비트버킷Bitbucket과 요비Yobi 등\r\n\r\n최근 유행하는 협업개발플랫폼의 경우에는 마크다운을 변환하는 컨버터 기능을 기본탑재하고 있기 때문에 마크다운 문법으로 작성한 텍스트를 그대로 복사해서 붙여넣거나 업로드하는 것만으로 마크다운의 적용이 가능하다.\r\n\r\n## [](#33-ms워드-적용)3.3. MS워드 적용\r\n\r\nView 영역의 항목을 그대로 붙여넣거나 HTML 내보내기 등으로 생성한 파일을 불러오는 형태로 사용가능하다. 적용한 헤더를 워드가 읽어드리면서 목차에 적용하기 때문에 이를 활용하면 목차까지도 손쉽게 적용이 가능해진다.\r\n\r\n---\r\n\r\n# [](#4-정리)4\\. 정리\r\n\r\n마크다운은 기본문법만 알고있다면 일반 텍스트편집기에서도 손쉽게 작성이 가능한 마크업언어다. 현재 다양한 도구와 플랫폼에서 지원하고 있기 때문에 더욱 손쉽게 스타일적용된 문서를 작성할 수 있어 점점 널리 사용되고 있다.\r\n\r\n> 마크다운을 이해하고 사용하면서 쉽고 빠르게 스타일문서를 작성해보세요.\r\n\r\n저는 Dropbox 프로를 구매해서 집-랩탑-스마트폰이 각각 연동을 시켜서 사용하고 있습니다. 드랍박스에 저장된 마크다운 문서는 Dropbox 웹서비스 상에서 제공하기 때문에 웹상에서 바로 열람할 수도 있어 링크를 걸어서 다른 사람과 공유하는 형식으로 사용하고 있다.\r\n\r\n-   링크 예: [Markdown 설명](https://www.dropbox.com/s/mzp9tq4qtfjdlif/20141021_markdown_use_tip.md?dl=0)\r\n\r\n---\r\n\r\n# [](#ps)P.S.\r\n\r\n최근에는 [Notion](https://www.notion.so/product) 을 조금씩 사용중이다. Notion 에서 작성한 문서는 Atom([https://atom.io/](https://atom.io/)), Visual Studio Code([https://code.visualstudio.com/](https://code.visualstudio.com/)), Notepad++([https://notepad-plus-plus.org/](https://notepad-plus-plus.org/))텍스트 편집기에 복붙(복사하고 붙여넣기)하면 마크다운문법으로 작성된 문장이 기입되고 이지윅 에디터를 제공하는 웹에디터에 붙여넣기 하면 거의 완벽한 형태로 복사된다. 그래서 애용중이다.\r\n\r\n## [](#-참고문서)○ 참고문서\r\n\r\n-   [78 Tools for writing and previewing Markdown](http://mashable.com/2013/06/24/markdown-tools/)\r\n-   [John gruber 마크다운 번역](http://nolboo.github.io/blog/2013/09/07/john-gruber-markdown/)\r\n-   [깃허브 취향의 마크다운 번역](http://nolboo.github.io/blog/2014/03/25/github-flavored-markdown/)\r\n-   [허니몬의 마크다운 작성법](http://www.slideshare.net/ihoneymon/ss-40575068)\r\n-   Notion.so([https://www.notion.so/product](https://www.notion.so/product))\r\n-   Atom([https://atom.io/](https://atom.io/))\r\n-   Visual Studio Code([https://code.visualstudio.com/](https://code.visualstudio.com/))\r\n-   Notepad++([https://notepad-plus-plus.org/](https://notepad-plus-plus.org/))',1,1,0,897,0),
(16,'2020-12-23 00:52:05','2020-12-31 01:19:09','파비콘 설명 적용 방법?','파비콘에 대해 궁금했던 내용들을 정리했습니다.\r\n\r\n![](https://t1.daumcdn.net/cfile/tistory/2176FD36555471FE2D)\r\n\r\n### 파비콘(favicon) 소개\r\n\r\n파비콘은 웹페이지에 접속했을때, 상단 탭에 보여지는 아이콘을 일컫는다. 이 아이콘은 즐겨찾기에 웹페이지를 등록할때도 사용된다. 웹사이트를 대표하는 로고(logo)의 개념과 비슷하며, 사이트의 성격을 드러내기도 한다.\r\n\r\n최근에는 터치(touch) 아이콘, 타일(tile) 아이콘의 등장으로 더욱 혼란스러움이 가중되었으며, 각각의 기기에 최적화된 파비콘의 크기를 재설정하여 개발자들에게 어려움을 주고 있다.\r\n\r\n### 파비콘(favicon) 기본 설정\r\n\r\n1999년에 인터넷 익스플로러(Internet Explorer)에 처음 도입된 후로, 파비콘의 사양은 거의 변경되지 않은 채로 대부분 아이콘(ico) 파일의 형태로 도메인(domain)의 루트(root) 디렉토리에 위치해 왔다.\r\n\r\n![](https://t1.daumcdn.net/cfile/tistory/250FC64A5559181E27)\r\n\r\n크로스브라우징을 염두에 둔다면, 어떠한 HTML 코드도 작성하지 않고, 자신의 웹계정 루트(root) 디렉토리에 **16x16** 과 **32x32**의 이미지를 하나에 품은(multiple sizes[\\[각주:1\\]](#footnote_337_1)) `favicon.ico` 파일을 위치시킴으로써, 설정을 마무리한다.\r\n\r\n이 방법은 씨몽키(SeaMonkey) 브라우저를 제외한 모든 데스크톱 브라우저/버전에서(IE6 포함) 작동한다.\r\n\r\nCMS의 경우에는 테마(theme) 혹은 이미지(image) 디렉토리를 이용하기도 한다.\r\n\r\nHtml\r\n\r\n```html\r\n<link rel=\"shortcut icon\" href=\"/path/to/favicon.ico\">\r\n\r\n```\r\n\r\nrel 속성과 type 속성 자세히\r\n\r\n접기\r\n\r\nIE에서는 `rel=\"shortcut icon\"`처럼 rel 속성에 두가지 값을 모두 입력하면 IE6~10까지 이상없이 작동되고, 그 밖의 다른 브라우저는 `rel=\"icon\"`처럼 icon 값만 입력해도 작동된다.\r\n\r\nHtml\r\n\r\n```html\r\n<!-- IE6-10 -->\r\n<link rel=\"shortcut icon\" href=\"path/to/favicon.ico\">\r\n \r\n<!-- Everybody else -->\r\n<link rel=\"icon\" href=\"path/to/favicon.ico\">\r\n\r\n```\r\n\r\ntype 속성의 값은 IE에서만 ICO 파일에 대한 서버의 MIME 값에 영향을 받고 다른 브라우저는 이 속성을 무시한다. 결국 type 속성은 무엇이든 값이 될 수 있고, 없어도 된다.\r\n\r\nHtml\r\n\r\n```html\r\n<!-- Still works in IE6+ -->\r\n<link rel=\"shortcut icon\" href=\"path/to/favicon.ico\" type=\"image/vnd.microsoft.icon\">\r\n \r\n<!-- Still works in IE6+ -->\r\n<link rel=\"shortcut icon\" href=\"path/to/favicon.ico\" type=\"image/x-icon\">\r\n \r\n<!-- Still works in IE6+ -->\r\n<link rel=\"shortcut icon\" href=\"path/to/favicon.ico\">\r\n\r\n```\r\n\r\n접기\r\n\r\n전통적으로 favicon.ico 파일은 16컬러 24비트 알파 투명도(alpha transparency) 포맷의 16x16 아이콘(ICO) 파일이다. 최근의 파비콘은 32x32를 지원하는데, 모든 주요 인기 있는 브라우저들에서 적절하게 축소되어 이를 표현해준다. IE10의 매트로(Metro)에서는 32x32 아이콘이 주소창에 사용된다.\r\n\r\n![](https://t1.daumcdn.net/cfile/tistory/271CDC435559187D26)\r\n\r\nICO 파일을 사용할 경우 아래와 같은 크기 정도는 포함하는 것을 추천한다.\r\n\r\n| 크기 | 용도 |\r\n| --- | --- |\r\n| 16x16 | IE9 주소 표시줄, 고정된(pinned) 사이트의 점프목록/툴바/오버레이 |\r\n| 32x32 | IE의 새로운 탭 페이지, 윈도우7 이상에서 작업 표시줄 단추, Safari 나중에 읽기 사이드바 |\r\n| 48x48 | 윈도우즈 사이트 아이콘 |\r\n\r\n좀 더 완벽하게 설정하길 원하고 1~3kb 쯤의 여분의 용량증가가 상관없다면 아래의 크기도 포함시켜도 된다.\r\n\r\n| 크기 | 용도 |\r\n| --- | --- |\r\n| 24x24 | IE9 고정된(pinned) 사이트 브라우저 UI |\r\n| 64x64 | 윈도우즈 사이트 아이콘, HiDPI/Retina 에서 Safari 나중에 읽기 사이드바 |\r\n\r\n### 파비콘(favicon) 추가 설정\r\n\r\niOS 2.0 이상과 Android 2.1 이상에서는 터치(Touch) 아이콘 지정이 가능하다. 고해상도 아이콘(152x152) 하나만 준비하면 저해상도에서는 알아서 아이콘의 크기가 변경된다. 다만, 기기의 홈스크린에 아이콘이 추가되면 성능에 부정적일 수는 있다.\r\n\r\nHtml\r\n\r\n```html\r\n<link rel=\"apple-touch-icon-precomposed\" href=\"path/to/favicon-152.png\">\r\n\r\n```\r\n\r\napple-touch-icon 세분화 대응\r\n\r\n접기\r\n\r\napple-touch-icon에 대해 좀 더 완벽하게 대응하고 싶다면 아래와 같이 세분화 할 수 있지만, 굳이 이럴 필요까지야...\r\n\r\nHtml\r\n\r\n```html\r\n<!-- For iPad with high-resolution Retina display running iOS ≥ 7: -->\r\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"152x152\" href=\"/path/to/favicon-152.png\">\r\n\r\n<!-- For iPad with high-resolution Retina display running iOS ≤ 6: -->\r\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"/path/to/favicon-144.png\">\r\n\r\n<!-- For iPhone with high-resolution Retina display running iOS ≥ 7: -->\r\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"120x120\" href=\"/path/to/favicon-120.png\">\r\n\r\n<!-- For iPhone with high-resolution Retina display running iOS ≤ 6: -->\r\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"/path/to/favicon-114.png\">\r\n\r\n<!-- For first- and second-generation iPad: -->\r\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"72x72\" href=\"/path/to/favicon-72.png\">\r\n\r\n<!-- For non-Retina iPhone, iPod Touch, and Android 2.1+ devices: -->\r\n<link rel=\"apple-touch-icon-precomposed\" href=\"/path/to/favicon-57.png\">\r\n\r\n```\r\n\r\n위의 코드로 적용되지 않는 경우를 위해 추가적인 PNG 크기를 준비한다.\r\n\r\nHtml\r\n\r\n```html\r\n<link rel=\"icon\" href=\"/path/to/favicon-32.png\" sizes=\"32x32\">\r\n\r\n```\r\n\r\n접기\r\n\r\nIE10 매트로는 타일(tile) 아이콘이 추가되었는데(apple-touch-icon과 유사한) 방문자가 고정(pins)할 경우, 시작화면에 이를 표시한다. 타일 아이콘의 크기는 144x144 PNG 파일이며, 투명한 배경을 사용해야 최상의 결과를 얻을 수 있다.\r\n\r\nHtml\r\n\r\n```html\r\n<meta name=\"msapplication-TileColor\" content=\"#FFFFFF\">\r\n<meta name=\"msapplication-TileImage\" content=\"/path/to/favicon-144.png\">\r\n\r\n```\r\n\r\n원하는 타일의 색상으로 `content=\"#ffffff\"`부분을 수정하면 된다.\r\n\r\n### 파비콘(favicion) PNG 파일 지원 사항\r\n\r\nChrome, Firefox, Opera 7+, 그리고 Safari 4+는 모두 PNG 파비콘을 지원하지만 Chrome과 Safari는 ICO 파비콘이 함께 지정되어 있으면 선언된 순서에 상관없이 PNG 파비콘을 무시하고 ICO 파비콘을 사용한다. 즉, PNG 파비콘을 지원하지 않는 IE를 위해 ICO 파일을 사용하게 되는 순간, Chrome과 Safari는 PNG 파비콘을 무시하게 된다는 이야기다.\r\n\r\nfavicion.ico > favicon.png\r\n\r\nHtml\r\n\r\n```html\r\n<!-- Chrome, Safari, IE -->\r\n<link rel=\"shortcut icon\" href=\"path/to/favicon.ico\">\r\n \r\n<!-- Firefox, Opera (Chrome and Safari say thanks but no thanks) -->\r\n<link rel=\"icon\" href=\"path/to/favicon.png\">\r\n\r\n```\r\n\r\nICO 파비콘은 multiple sizes를 지원하기에 하나의 ICO 파일에 여러 사이즈의 아이콘을 넣어 두고 이를 활용할 수 있지만 PNG 파비콘은 이것이 불가능하다. 그런 이유로 각각의 필요한 사이즈를 아래와 같이 모두 선언해야 한다.\r\n\r\nHtml\r\n\r\n```html\r\n<link rel=\"icon\" href=\"favicon-16.png\" sizes=\"16x16\">\r\n<link rel=\"icon\" href=\"favicon-32.png\" sizes=\"32x32\">\r\n<link rel=\"icon\" href=\"favicon-48.png\" sizes=\"48x48\">\r\n<link rel=\"icon\" href=\"favicon-64.png\" sizes=\"64x64\">\r\n<link rel=\"icon\" href=\"favicon-128.png\" sizes=\"128x128\">\r\n\r\n```\r\n\r\nPNG 파비콘을 사용시에 브라우저는 어떠한 파비콘을 사용할지 어떻게 결정하는가?\r\n\r\n-   Firefox와 Safari는 마지막에 제공되는 파비콘을 사용한다.\r\n-   맥(Mac) 용 Chrome은 ICO 포맷의 파비콘이 아니라면 32x32 파비콘을 사용한다.\r\n-   윈도우즈(Windows) 용 Chrome은 16x16이 먼저 선언되지 않는다면 ICO 파비콘이 사용된다.\r\n-   상기 옵션 중 아무것도 사용할 수 없는 경우, 양쪽 Chrome은 먼저 선언되는 파비콘을 사용하고 Firefox와 Safari는 마지막에 선언된 것이 사용된다. 사실 맥 용 Chrome은 16x16 파비콘을 무시하고 non-retina 기기에서 16x16으로 크기를 줄일때만 32x32 파비콘을 사용한다.\r\n-   Opera는 사용가능한 아이콘 중에서 하나를 임의로 선택하게 된다.\r\n\r\n### 파비콘(favicon) 실전 정리\r\n\r\n적어도 아래의 ICO 파일은 준비한다.\r\n\r\n| 크기 | 파일명 | 용도 |\r\n| --- | --- | --- |\r\n| 16x16 & 32x32 | favicon.ico | IE를 위해 필요한 기본이다. |\r\n\r\n조금 느려지더라도 iOS와 Android를 고려하겠다면 아래와 같은 PNG 파일을 준비한다.\r\n\r\n| 크기 | 파일명 | 용도 |\r\n| --- | --- | --- |\r\n| 152x152 | favicon-152.png | 일반적으로 iOS와 Android에서 사용하는 아이콘, 기기에 따라 자동으로 크기가 줄여진다. |\r\n\r\n좀 더 완벽한 파비콘을 설정하기 원한다면 아래의 표를 참고하여 PNG 파일을 준비하도록 하자.\r\n\r\n| 크기 | 파일명 | 용도 |\r\n| --- | --- | --- |\r\n| 32x32 | favicon-32.png | 일부 오래된 하지만 너무 오래된 Chrome은 ICO를 제대로 처리하지 못함. |\r\n| 57x57 | favicon-57.png | 표준 iOS 홈스크린(iPad Touch, iPhone 3G의 1세대) |\r\n| 72x72 | favicon-72.png | iPad 홈스크린 아이콘 |\r\n| 96x96 | favicon-96.png | 구글TV 아이콘 |\r\n| 120x120 | favicon-120.png | iPhone 레티나(retina) 터치 아이콘(Change for iOS 7: up from 114x114) |\r\n| 128x128 | favicon-128.png | Chrome 웹스토어 아이콘 |\r\n| 144x144 | favicon-144.png | 고정(pinned)된 IE10 매트로 타일 |\r\n| 152x152 | favicon-152.png | iPad 레티나 터치 아이콘(Change for iOS 7: up from 144x144) |\r\n| 195x195 | favicon-195.png | Opera 스피드 다이얼 아이콘 |\r\n| 228x228 | favicon-228.png | Opera Coast 아이콘 |\r\n\r\n### 파비콘(favicon)과 IE 브라우저 유의사항\r\n\r\n-   IE8~10은 페이지의 첫 방문에 바로 파비콘을 표시해준다.\r\n-   IE7은 첫번째 방문은 무시하고 재방문시에 파비콘을 표시해준다.\r\n-   IE6은 사이트를 북마크를 한 후 브라우저를 다시 열면 표시해준다. IE6은 브라우저 캐시가 삭제 될 때마다 파비콘을 삭제하며, 사이트가 다시 북마크된다거나 파비콘이 어떻게든 다시 로드 될때까지 파비콘을 표시하지 않는다.\r\n\r\n### 파비콘(favicon) 강제 새로고침\r\n\r\n일반적으로는 필요치 않으나, 개발하는 동안이나 새로고침으로 파비콘이 표시되지 않을때를 고려한 방법이다.\r\n\r\n-   브라우저 캐시를 삭제한다(Ctrl + F5 혹은 Ctrl + Shift + R).\r\n-   만일 IE라면 브라우저를 닫고 다시 연다.\r\n-   만일 여전히 골머리를 썩고 있다면 새로운 탭을 열어보거나 [How do I force a favicon refresh]( http://stackoverflow.com/questions/2208933/how-do-i-force-a-favicon-refresh)을 참고하라.\r\n-   일시적으로 명시적인 HTML 태그를 추가하고 쿼리 문자열을 추가한다. 확인이 완료된 후엔 이를 제거하자.\r\n    \r\n    Html\r\n    \r\n    ```html\r\n    <link rel=\"shortcut icon\" href=\"http://www.yoursite.com/favicon.ico?v=2\">\r\n    <link rel=\"icon\" sizes=\"16x16 32x32\" href=\"/favicon.ico?v=2\">\r\n    \r\n    ```\r\n    \r\n\r\n### 도움이 되는 도구들\r\n\r\n-   [OptiPNG](http://optipng.sourceforge.net/) : ICO 파일안에 넣을 PNG 파일들을 최적화 한다.\r\n-   [x-icon editor](http://www.xiconeditor.com/) : ICO 파일을 만들수 있는 웹용 도구이다.\r\n-   [Favicon & App Icon Generator](http://www.favicon-generator.org/) : PNG 파비콘을 다양하게 생성해준다(위에서 다룬 apple-touch-icon을 크기별로, IE10용 타일 파비콘을 생성).\r\n\r\n### 파비콘 만드는 사이트\r\n\r\n-    [https://icoconvert.com/](https://icoconvert.com/)\r\n\r\n### 참고문헌 및 관련링크.\r\n\r\n1.  [favicon-cheat-sheet](https://github.com/audreyr/favicon-cheat-sheet)\r\n2.  [understand-the-favicon](http://www.jonathantneal.com/blog/understand-the-favicon/)',1,3,0,568,0),
(17,'2020-12-23 19:40:28','2020-12-31 01:19:09','css 박스 안 넘치는 글 자르기','고정된 너비만을 제공하는 레이아웃에서는 서버단에서 화면에 출력할 글자수를 미리 가늠하며 디자인하기가 수월합니다. 레이아웃이 유동적인 너비를 가지거나 서버 스크립트쪽에 접근할 수 없어 글자수를 제어하기 곤란할 경우에는 아래에서 설명하는 방법들이 추천됩니다.\r\n\r\n### 한 줄 단위로 글자 자르기\r\n\r\n처음으로 적용해 볼 것은 한 줄, 혹은 여러 줄에 걸쳐 출력되고 있는 글자들을 지정된 너비에 맞게\r\n\r\n**한 줄 단위로**\r\n\r\n자르는 법이다. 이는 여러가지 CSS 속성들을 조합하여 조건을 맞추는 일부터 시작된다.\r\n\r\n#### 출력될 너비 조정하기\r\n\r\nCSS로 글자 자르기를 위해서는 글자가 출력될 너비가 필요하다. 기본적으로  **display** 속성의 `inline` 값과 같이 요소의 너비를 가질 수 없는 경우에는 이를 너비를 가질 수 있게 변경해야 한다.\r\n\r\nCSS\r\n\r\n```css\r\n.target {\r\n    display: block;\r\n}\r\n\r\n```\r\n\r\n  \r\n\r\n요소를 `block` 값으로 변경했기에 자동적으로 요소의 너비는 부모 너비의 100%를 차지하도록 변경된다. 만약 `inline-block` 과 같이 콘텐츠에 따라 유동적인 너비를 가진다면 직접 요소의 너비를 설정해야 한다. 즉, 일정한 고정된 너비를 가지는 것이 전제 조건이다.\r\n\r\nCSS\r\n\r\n```css\r\n.target {\r\n    display: inline-block;\r\n    width: 200px;\r\n}\r\n\r\n```\r\n\r\n#### 줄바꿈을 없애기\r\n\r\n너비가 지정된 요소라도 글자수가 해당 너비를 넘어서게 되면 자동으로 줄바꿈이 이루어진다. 이 것은 [white-space] 속성을 `nowrap` 으로 설정하여 방지할 수 있다.\r\n\r\nCSS\r\n\r\n```css\r\n.target {\r\n    display: inline-block;\r\n    width: 200px;\r\n    white-space: nowrap;\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n#### 넘치는 부분을 감추기\r\n\r\nCSS에서 요소를 넘치는 부분을 처리하는 것은 [overflow] 속성이 담당한다. 대상 요소의 overflow 속성을 `hidden` 으로 설정하여 넘치는 부분을 화면에서 숨긴다.\r\n\r\nCSS\r\n\r\n```css\r\n.target {\r\n    display: inline-block;\r\n    width: 200px;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n#### 숨긴 부분 처리\r\n\r\n위에서 설정한 속성들과 속성값으로 인해 숨겨지게 되는 부분을 처리하는 방식은 [text-overflow]속성이 담당하며, `ellipsis` 를 설정하면 말줄임표(...)가 숨겨지는 영역의 끝에 생성된다(오우~ 굿!).\r\n\r\nCSS\r\n\r\n```css\r\n.target {\r\n    display: inline-block;\r\n    width: 200px;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n}\r\n\r\n```\r\n\r\n\r\n이상의 내용은 출력될 글자수를 서버단에서 적은 수로 제한하지 않은 경우에는 유동적인 너비에 충분히 대응된다. 다만, 한 줄로 레이아웃이 제한된다는 것에 유념해야 한다.\r\n\r\n### 여러 줄 단위로 글자 자르기\r\n\r\n다음으로 적용해 볼 것은 여러 줄에 걸쳐 출력되고 있는 글자들을 지정된 너비와 높이에 맞게\r\n\r\n**여러 줄 단위로**\r\n\r\n자르는 법이다. 이는 위에서 다룬 내용의 반복과 추가적인 설정이 필요하다.\r\n\r\n#### 한 줄 출력의 해제 및 재설정\r\n\r\n위의 한 줄 자르기에서 `white-space` 속성을 이용해서 여러 줄에 걸쳐 출력되는 글자를 한 줄로 출력되게 했었다. 이를 해제하여 다시 여러 줄로 표현되게 해야 한다.\r\n\r\nCSS\r\n\r\n```css\r\n.target {\r\n    /* 한 줄 자르기 */\r\n    display: inline-block;\r\n    width: 200px;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n\r\n    /* 여러 줄 자르기 추가 스타일 */\r\n    white-space: normal;\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n#### 줄 높이의 추가\r\n\r\n여러 줄을 출력하기 위해서는 요소의 줄 높이의 설정이 필수다. 이 줄 높이가 기준이 되어 보여주고 싶은 줄의 행수 만큼 요소의 높이를 설정하게 된다.\r\n\r\nCSS\r\n\r\n```css\r\n.target {\r\n    /* 한 줄 자르기 */\r\n    display: inline-block;\r\n    width: 200px;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n\r\n    /* 여러 줄 자르기 추가 스타일 */\r\n    white-space: normal;\r\n    line-height: 1.2;\r\n}\r\n\r\n```\r\n\r\n#### 요소 높이의 추가\r\n\r\n위에서 설정한 줄 높이를 기준으로 요소의 높이를 설정한다. 즉, 2줄을 보여주고 싶다면 높이를 줄 높이의 2배로 설정하고 3줄을 보여주고 싶다면 줄 높이의 3배로 설정하면 된다.\r\n\r\nCSS\r\n\r\n```css\r\n.target {\r\n    /* 한 줄 자르기 */\r\n    display: inline-block;\r\n    width: 200px;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n\r\n    /* 여러 줄 자르기 추가 스타일 */\r\n    white-space: normal;\r\n    line-height: 1.2;\r\n    height: 3.6em;\r\n}\r\n\r\n```\r\n\r\n  \r\n\r\n`height` 대신에 `max-height` 를 설정해서 최대치만 제한해도 된다.\r\n\r\n#### 숨긴 부분 처리 추가\r\n\r\n위의 설정으로 여러 줄을 출력하고 글자를 자를 수 있지만 `text-overflow` 속성으로 숨긴 부분에 대한 처리가 되질 않는다. 여러 줄에 걸친 숨긴 처리는 현재 웹킷 계열의 브라우저에서만 지원하는 속성으로 아래와 같다.\r\n\r\nCSS\r\n\r\n```css\r\n.target {\r\n    /* 한 줄 자르기 */\r\n    display: inline-block;\r\n    width: 200px;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n\r\n    /* 여러 줄 자르기 추가 스타일 */\r\n    white-space: normal;\r\n    line-height: 1.2;\r\n    height: 3.6em;\r\n    text-align: left;\r\n    word-wrap: break-word;\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 3;\r\n    -webkit-box-orient: vertical;\r\n}\r\n\r\n```\r\n\r\n\r\n-   `text-align: left` : 글자 정렬이 양쪽 정렬이면 말 줄임표가 숨겨질 수 있으니 좌측 정렬로\r\n-   `word-wrap: break-word` : 잘라버릴 글자를 단어 단위로\r\n-   `display: -webkit-box` : 여백 삽입과 같이 유연한 높이 증가를 위해 플렉스 박스형태로 변환\r\n-   `-webkit-line-clamp: 3` : 보여줄 줄 갯수\r\n-   `-webkit-box-orient: vertical` : 플렉스 박스의 방향 설정\r\n\r\n다시 말하자면, 크롬이나 오페라, 사파리 같은 웹킷 계열의 브라우저는 여러 줄의 글자를 자르는 자신만의 방법을 제공하고 있기에 높이나 줄 높이 설정이 필요치 않는다. 다만 크로스브라우징을 위해서 필요할 뿐이다.\r\n',1,3,0,654,0);

/*Table structure for table `articleReply` */

DROP TABLE IF EXISTS `articleReply`;

CREATE TABLE `articleReply` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `regDate` datetime NOT NULL,
  `updateDate` datetime NOT NULL,
  `memberId` int(10) unsigned NOT NULL,
  `articleId` int(10) unsigned NOT NULL,
  `body` char(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

/*Data for the table `articleReply` */

/*Table structure for table `board` */

DROP TABLE IF EXISTS `board`;

CREATE TABLE `board` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `regDate` datetime NOT NULL,
  `updateDate` datetime NOT NULL,
  `name` char(20) NOT NULL,
  `code` char(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4;

/*Data for the table `board` */

insert  into `board`(`id`,`regDate`,`updateDate`,`name`,`code`) values 
(1,'2020-12-20 01:25:13','2020-12-20 01:25:13','java','java'),
(3,'2020-12-20 23:55:21','2020-12-20 23:55:21','html&CSS','html&CSS'),
(5,'2020-12-20 23:55:22','2020-12-20 23:55:22','MySQL','MySQL'),
(6,'2020-12-20 23:55:23','2020-12-20 23:55:23','source code','source');

/*Table structure for table `member` */

DROP TABLE IF EXISTS `member`;

CREATE TABLE `member` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `regDate` datetime NOT NULL,
  `updateDate` datetime NOT NULL,
  `loginId` char(20) NOT NULL,
  `loginPw` char(20) NOT NULL,
  `name` char(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4;

/*Data for the table `member` */

insert  into `member`(`id`,`regDate`,`updateDate`,`loginId`,`loginPw`,`name`) values 
(1,'2020-12-20 01:25:13','2020-12-20 01:25:13','aaa','aaa','D.K'),
(2,'2020-12-20 01:25:13','2020-12-20 01:25:13','bbb','bbb','bbb');

/*Table structure for table `recommand` */

DROP TABLE IF EXISTS `recommand`;

CREATE TABLE `recommand` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `updateDate` datetime NOT NULL,
  `memberId` int(10) unsigned NOT NULL,
  `articleId` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

/*Data for the table `recommand` */

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
